import { InferMutationOutput, InferQueryOutput } from '@rollouthq/api-client-react';
import * as zod from 'zod';
import { z } from 'zod';
import { ReactNode, FunctionComponent, createElement, ReactElement } from 'react';
import { EndUser, Credential, Customer as Customer$2 } from '@rollouthq/prisma';
import * as _rollouthq_common from '@rollouthq/common';
import { RichEditorContent } from '@rollouthq/common';
export { curlyTemplate } from '@rollouthq/common';
import * as aws_lambda from 'aws-lambda';
import { EndUser as EndUser$1, Customer as Customer$1 } from '@rollouthq/prisma/index';

declare const zAutomationCustomData: z.ZodRecord<z.ZodString, z.ZodAny>;
declare type AutomationCustomData = z.infer<typeof zAutomationCustomData>;

declare function Card(props: {
    children: ReactNode;
}): JSX.Element;

declare type RenderCb<Ctx extends {}> = (ctx: Ctx & {
    createElement: typeof createElement;
    Card: typeof Card;
}) => ReactNode;
declare type RenderCbOrBool<Ctx extends {}> = RenderCb<Ctx> | boolean;
declare type FieldProps = {
    disabled?: boolean;
};
declare type FieldComponent = FunctionComponent<FieldProps>;
declare type TriggerRenderCb = RenderCbOrBool<{
    TriggerAppKeyField: FieldComponent;
    TriggerKeyField: FieldComponent;
}>;
declare type ActionRenderCb = RenderCbOrBool<{
    ActionAppKeyField: FieldComponent;
    ActionKeyField: FieldComponent;
    ActionCredentialIdField: FieldComponent;
    ActionInputFields: FieldComponent;
}>;
declare type RenderFields = {
    name?: RenderCbOrBool<{
        NameField: FieldComponent;
    }>;
    trigger?: TriggerRenderCb | {
        appKey?: RenderCbOrBool<{
            TriggerAppKeyField: FieldComponent;
        }>;
        triggerKey?: RenderCbOrBool<{
            TriggerKeyField: FieldComponent;
        }>;
        inputParams?: {
            [param: string]: RenderCbOrBool<{
                InputParamField: FieldComponent;
            }>;
        };
    };
    action?: ActionRenderCb | {
        appKey?: RenderCbOrBool<{
            ActionAppKeyField: FieldComponent;
        }>;
        actionKey?: RenderCbOrBool<{
            ActionKeyField: FieldComponent;
        }>;
        credentialId?: RenderCbOrBool<{
            ActionCredentialIdField: FieldComponent;
        }>;
        inputParams?: {
            [param: string]: RenderCbOrBool<{
                InputParamField: FieldComponent;
            }>;
        };
    };
};

declare const zAutomationFormSchema: z.ZodObject<{
    name: z.ZodString;
    trigger: z.ZodObject<{
        appKey: z.ZodString;
        triggerKey: z.ZodString;
        credentialId: z.ZodString;
        inputParams: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
    }, "strip", z.ZodTypeAny, {
        appKey: string;
        triggerKey: string;
        credentialId: string;
        inputParams: {};
    }, {
        appKey: string;
        triggerKey: string;
        credentialId: string;
        inputParams: {};
    }>;
    action: z.ZodObject<{
        appKey: z.ZodString;
        actionKey: z.ZodString;
        credentialId: z.ZodString;
        inputParams: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
    }, "strip", z.ZodTypeAny, {
        appKey: string;
        credentialId: string;
        inputParams: {};
        actionKey: string;
    }, {
        appKey: string;
        credentialId: string;
        inputParams: {};
        actionKey: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    action: {
        appKey: string;
        credentialId: string;
        inputParams: {};
        actionKey: string;
    };
    trigger: {
        appKey: string;
        triggerKey: string;
        credentialId: string;
        inputParams: {};
    };
}, {
    name: string;
    action: {
        appKey: string;
        credentialId: string;
        inputParams: {};
        actionKey: string;
    };
    trigger: {
        appKey: string;
        triggerKey: string;
        credentialId: string;
        inputParams: {};
    };
}>;
declare type AutomationFormData = z.output<typeof zAutomationFormSchema>;
declare type MakePartialRef<Type extends {}, RequiredProps extends keyof Type> = Pick<Type, RequiredProps> & Omit<MaybeUndefinedProps<Type>, RequiredProps>;
declare type PartialActionRef = MakePartialRef<AutomationFormData["action"], "appKey" | "inputParams">;
declare type PartialTriggerRef = MakePartialRef<AutomationFormData["trigger"], "appKey" | "inputParams">;
declare type PartialAutomationFormData = Omit<MaybeUndefinedProps<AutomationFormData>, "action" | "trigger"> & {
    action?: PartialActionRef;
    trigger?: PartialTriggerRef;
};
declare type MaybeUndefinedProps<T> = {
    [K in keyof T]?: T[K] | undefined;
};

declare type AutomationFormProps = {
    data: PartialAutomationFormData;
    onUpdate: (updater: (currentData: PartialAutomationFormData) => PartialAutomationFormData) => void;
    onSave: (data: AutomationFormData) => void;
    onSubmit?: (data: AutomationFormData) => void;
    onCancel?: () => void;
    onDelete?: () => void;
    isSaving: boolean;
    mode: "edit" | "create" | "task";
    renderFields?: RenderFields;
};

declare type Automation$1 = InferMutationOutput<"automations.create">;
declare type OnBeforeAutomationCreatedReturnSync = boolean | {
    automationData: AutomationFormData & {
        customData?: AutomationCustomData;
    };
};
declare type PrefilledData = {
    name?: string;
    trigger?: {
        appKey?: string;
        triggerKey?: string;
        inputParams?: Record<string, any>;
        credentialId?: string;
    };
    action?: {
        appKey?: string;
        actionKey?: string;
        inputParams?: Record<string, any>;
        credentialId?: string;
    };
};
declare type AutomationCreatorProps = {
    onAutomationCreated: (props: {
        automation: Automation$1;
    }) => void;
    onBeforeAutomationCreate?: (props: {
        automationData: AutomationFormData;
    }) => OnBeforeAutomationCreatedReturnSync | Promise<OnBeforeAutomationCreatedReturnSync>;
    onCancel?: () => void;
    prefilled?: PrefilledData;
    renderFields?: AutomationFormProps["renderFields"];
};
declare function AutomationCreator(props: AutomationCreatorProps): JSX.Element;

declare type Automation = NonNullable<InferQueryOutput<"automations.get">>;
declare type AutomationEditorProps = {
    automationId: string;
    onAutomationDeleted?: () => void;
    onAutomationUpdated?: (automation: Automation) => void;
    onCancel?: () => void;
    renderFields?: AutomationFormProps["renderFields"];
};
declare function AutomationEditor(props: AutomationEditorProps): JSX.Element | null;

declare type AutomationsListItem = InferQueryOutput<"automations.list">[number];
declare type AutomationFilterData = {
    name?: string;
    trigger: {
        appKey?: string;
        triggerKey?: string;
        inputParams?: Record<string, any>;
    };
    action: {
        appKey?: string;
        actionKey?: string;
        inputParams?: Record<string, any>;
    };
};
declare type MyAutomationsProps = {
    onEditAutomation: (automation: AutomationsListItem) => void;
    onCreateAutomation: () => void;
    filter?: (automation: AutomationFilterData) => boolean;
};
declare function MyAutomations(props: MyAutomationsProps): JSX.Element;

declare type AutomationsManagerProps = {
    onAutomationCreated?: AutomationCreatorProps["onAutomationCreated"];
    onBeforeAutomationCreate?: AutomationCreatorProps["onBeforeAutomationCreate"];
    prefilled?: AutomationCreatorProps["prefilled"];
    filter?: MyAutomationsProps["filter"];
    renderFields?: AutomationFormProps["renderFields"];
};
declare function AutomationsManager(props: AutomationsManagerProps): JSX.Element;

declare type BlueprintActivatorProps = {
    blueprintId: string;
};
declare function BlueprintActivator(props: BlueprintActivatorProps): JSX.Element | null;

declare type BlueprintsListProps = {
    blueprints: BlueprintsListItem[];
    isLoading?: boolean;
    onOpenActivationForm: (blueprint: BlueprintsListItem) => void;
};
declare function BlueprintsList(props: BlueprintsListProps): JSX.Element;
declare type BlueprintsListItemProps = {
    blueprint: BlueprintsListItem;
    onOpenActivationForm: () => void;
};
declare type BlueprintsListItem = InferQueryOutput<"blueprints.list">[number];
declare function BlueprintsListItem(props: BlueprintsListItemProps): JSX.Element;

declare type BlueprintsManagerView = {
    mode: "LIST";
} | {
    mode: "ACTIVATE";
    blueprintId: string;
};
declare function BlueprintsManager(): JSX.Element;

declare type BlueprintListItem = InferQueryOutput<"blueprints.list">[number];
declare type MyBlueprintsProps = {
    onOpenActivationForm: (blueprint: BlueprintListItem) => void;
};
declare function MyBlueprints(props: MyBlueprintsProps): JSX.Element;

declare type TaskProps = {
    name: string;
    prefilled: Omit<PrefilledData, "name">;
    renderFields?: RenderFields;
};
declare function TaskInitiator(props: TaskProps): JSX.Element;

declare function PoweredByRollout(): JSX.Element;

declare const zAutomationTriggerRef: z.ZodUnion<[z.ZodObject<{
    appKey: z.ZodNativeEnum<{
        activeCampaign: "activeCampaign";
        asana: "asana";
        clickup: "clickup";
        close: "close";
        discord: "discord";
        dropbox: "dropbox";
        freshsales: "freshsales";
        freshservice: "freshservice";
        gmail: "gmail";
        googleCalendar: "googleCalendar";
        googleDocs: "googleDocs";
        googleSheets: "googleSheets";
        hubspot: "hubspot";
        intercom: "intercom";
        jiraSoftwareCloud: "jiraSoftwareCloud";
        klaviyo: "klaviyo";
        mailchimp: "mailchimp";
        microsoftExcel: "microsoftExcel";
        monday: "monday";
        msTeams: "msTeams";
        outlookMail: "outlookMail";
        pipedrive: "pipedrive";
        quickbooksOnline: "quickbooksOnline";
        salesforce: "salesforce";
        shopify: "shopify";
        slack: "slack";
        trello: "trello";
        twilio: "twilio";
        xero: "xero";
        zendesk: "zendesk";
        zoom: "zoom";
    }>;
    triggerKey: z.ZodString;
    credentialId: z.ZodString;
    inputParams: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
    triggerKey: string;
    credentialId: string;
    inputParams: Record<string, any>;
}, {
    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
    triggerKey: string;
    credentialId: string;
    inputParams: Record<string, any>;
}>, z.ZodObject<{
    appKey: z.ZodString;
    triggerKey: z.ZodString;
    credentialId: z.ZodString;
    inputParams: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    appKey: string;
    triggerKey: string;
    credentialId: string;
    inputParams: Record<string, any>;
}, {
    appKey: string;
    triggerKey: string;
    credentialId: string;
    inputParams: Record<string, any>;
}>]>;
declare type AutomationTriggerRef = z.infer<typeof zAutomationTriggerRef>;

declare const zCustomer: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodDate;
    appKey: z.ZodString;
    name: z.ZodString;
    clientId: z.ZodString;
    clientSecret: z.ZodString;
    dashboardClientSecret: z.ZodString;
    logo: z.ZodNullable<z.ZodString>;
    environmentVariables: z.ZodRecord<z.ZodString, z.ZodString>;
    verificationToken: z.ZodString;
    resultsCallbackConfig: z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
    }, {
        url?: string | undefined;
    }>;
    whitelabeledApps: z.ZodRecord<z.ZodNativeEnum<{
        activeCampaign: "activeCampaign";
        asana: "asana";
        clickup: "clickup";
        close: "close";
        discord: "discord";
        dropbox: "dropbox";
        freshsales: "freshsales";
        freshservice: "freshservice";
        gmail: "gmail";
        googleCalendar: "googleCalendar";
        googleDocs: "googleDocs";
        googleSheets: "googleSheets";
        hubspot: "hubspot";
        intercom: "intercom";
        jiraSoftwareCloud: "jiraSoftwareCloud";
        klaviyo: "klaviyo";
        mailchimp: "mailchimp";
        microsoftExcel: "microsoftExcel";
        monday: "monday";
        msTeams: "msTeams";
        outlookMail: "outlookMail";
        pipedrive: "pipedrive";
        quickbooksOnline: "quickbooksOnline";
        salesforce: "salesforce";
        shopify: "shopify";
        slack: "slack";
        trello: "trello";
        twilio: "twilio";
        xero: "xero";
        zendesk: "zendesk";
        zoom: "zoom";
    }>, z.ZodRecord<z.ZodString, z.ZodString>>;
    authentication: z.ZodNullable<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodNativeEnum<{
            apiKey: "apiKey";
            oauth2: "oauth2";
            none: "none";
        }>;
        configuration: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        type: "apiKey" | "oauth2" | "none";
        id: string;
        configuration: Record<string, any>;
    }, {
        type: "apiKey" | "oauth2" | "none";
        id: string;
        configuration: Record<string, any>;
    }>>;
}, "strip", z.ZodTypeAny, {
    appKey: string;
    id: string;
    createdAt: Date;
    name: string;
    clientId: string;
    clientSecret: string;
    dashboardClientSecret: string;
    logo: string | null;
    environmentVariables: Record<string, string>;
    verificationToken: string;
    resultsCallbackConfig: {
        url?: string | undefined;
    };
    whitelabeledApps: Partial<Record<"activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom", Record<string, string>>>;
    authentication: {
        type: "apiKey" | "oauth2" | "none";
        id: string;
        configuration: Record<string, any>;
    } | null;
}, {
    appKey: string;
    id: string;
    createdAt: Date;
    name: string;
    clientId: string;
    clientSecret: string;
    dashboardClientSecret: string;
    logo: string | null;
    environmentVariables: Record<string, string>;
    verificationToken: string;
    resultsCallbackConfig: {
        url?: string | undefined;
    };
    whitelabeledApps: Partial<Record<"activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom", Record<string, string>>>;
    authentication: {
        type: "apiKey" | "oauth2" | "none";
        id: string;
        configuration: Record<string, any>;
    } | null;
}>;
declare type Customer = z.infer<typeof zCustomer>;

/**
 * Recursively map all properties from `RichEditorContent` to `string`
 */
declare type ResolveVariables<Shape extends {}> = {
    [key in keyof Shape]: Shape[key] extends RichEditorContent | undefined ? Shape[key] extends RichEditorContent ? string : string | undefined : Shape[key] extends {} | undefined ? ResolveVariables<Shape[key]> : Shape[key];
};

declare type ActionExecutionResult = {
    ok: true;
    data: any;
} | {
    ok: false;
    error: any;
};
declare type ExecuteThirdPartyActionFunction<InputParams extends {}, AC extends AppCredential<any>, Env extends AppEnv> = (props: {
    credential: AC;
    resolvedInputParams: ResolveVariables<InputParams>;
    inputVariableValues: Record<string, any>;
    inputParams: InputParams;
    env: Env;
    customer: Customer;
    endUser: EndUser;
    triggerRef: AutomationTriggerRef;
}) => Promise<ActionExecutionResult>;

declare type TaskTriggerExecuteFunctionResult = {
    ok: true;
    data: Record<string, any>;
} | {
    ok: false;
    error: any;
};
declare type TaskTriggerExecuteFunction<InputParams extends {}, AC extends AppCredential<any>, Env extends AppEnv> = (opts: {
    credential: AC;
    inputParams: InputParams;
    env: Env;
    endUser: EndUser$1;
    customer: Customer$1;
}) => Promise<TaskTriggerExecuteFunctionResult>;

declare function startAutomationRun(automationRunId: string): Promise<ActionExecutionResult | undefined>;

declare type TriggerSetupResult = {
    ok: true;
    data: {
        webhookId: string;
        extraInfo?: any;
    };
} | {
    ok: false;
    error: any;
};
declare type TriggerDeletionResult = {
    ok: true;
} | {
    ok: false;
    error: string;
};

declare type AppEnv = {
    readonly [key: string]: string;
};

declare type AppCredential<AuthType extends keyof AppCredentialInfoByAuthType, Info extends {} = {}> = Omit<Credential, "info" | "appKey"> & {
    appKey: string;
    info: AppCredentialInfoByAuthType[AuthType] & Info;
};
declare type GetCredentialOptionResult = {
    id: string;
    label: string;
    avatar?: string;
};
declare type GetCredentialOptionFunction<AC extends AppCredential<any>, Env extends AppEnv> = (props: {
    credential: AC;
    env: Env;
}) => Promise<GetCredentialOptionResult>;
declare type GetAuthorizeURLFunction<Env extends AppEnv> = (props: {
    appKey: ThirdPartyAppKey;
    customer: Customer$2;
    endUser: EndUser;
    state: string;
    codeChallenge: string | undefined;
    redirectUri: string;
    env: Env;
    customParams: Record<string, any>;
}) => string | Promise<string>;
declare type Oauth1CredentialInfo = {
    id: string;
    token: string;
    tokenSecret: string;
};
declare type LongLivedCredentialInfo = {
    apiKey: string;
};
declare type AppCredentialInfoByAuthType = {
    oauth1: Oauth1CredentialInfo;
    oauth2: Oauth2CredentialInfo;
    oauth2WithoutRefresh: Oauth2WithoutRefreshCredentialInfo;
    apiToken: LongLivedCredentialInfo;
};
declare type CommonHandleRedirectProps<Env extends AppEnv> = {
    query: Record<string, string>;
    appKey: ThirdPartyAppKey;
    endUser: EndUser;
    state: string;
    requestUrl: string;
    redirectUri: string;
    env: Env;
    customParams: Record<string, any>;
};
declare type OAuth1HandleRedirectProps<Env extends AppEnv> = CommonHandleRedirectProps<Env> & {
    oauthToken: string;
    oauthVerifier: string;
};
declare type OAuth1Definition<C extends AppCredential<any>, Env extends AppEnv> = {
    type: "oauth1";
    getAuthorizeUrl: GetAuthorizeURLFunction<Env>;
    oauthRedirect: (props: OAuth1HandleRedirectProps<Env>) => Promise<C["info"]>;
    getCredentialOption: GetCredentialOptionFunction<C, Env>;
    refreshTokens: false | ((ctx: {
        credential: C;
    }) => Promise<C["info"]>);
    customParams?: AuthCustomParamInputDefinition[];
};
declare type PKCEFunction = () => {
    codeChallenge: string;
    codeVerifier: string;
};
declare type OAuth2HandleRedirectProps<Env extends AppEnv> = CommonHandleRedirectProps<Env> & {
    code: string;
    codeVerifier: string | undefined;
};
declare type Oauth2CredentialInfo = {
    id: string;
    accessToken: string;
    refreshToken: string;
    expireDate: string;
};
declare type Oauth2WithoutRefreshCredentialInfo = {
    id: string;
    accessToken: string;
};
declare type OAuth2Definition<C extends AppCredential<any>, Env extends AppEnv> = {
    type: "oauth2";
    pkce: boolean | PKCEFunction;
    getAuthorizeUrl: GetAuthorizeURLFunction<Env>;
    oauthRedirect: (props: OAuth2HandleRedirectProps<Env>) => Promise<C["info"]>;
    getCredentialOption: GetCredentialOptionFunction<C, Env>;
    refreshTokens: false | ((ctx: {
        credential: C;
        env: Env;
        redirectUri: string;
    }) => Promise<C["info"]>);
    customParams?: AuthCustomParamInputDefinition[];
};
declare const zAuthCustomParamInputDefinition: z.ZodObject<{
    key: z.ZodString;
    label: z.ZodString;
    placeholder: z.ZodOptional<z.ZodString>;
    infoHTML: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    placeholder?: string | undefined;
    infoHTML?: string | undefined;
    key: string;
    label: string;
}, {
    placeholder?: string | undefined;
    infoHTML?: string | undefined;
    key: string;
    label: string;
}>;
declare type AuthCustomParamInputDefinition = z.infer<typeof zAuthCustomParamInputDefinition>;
declare type ApiTokenAuthDefinition<C extends AppCredential<any>, Env extends AppEnv> = {
    type: "apiToken";
    customParams: AuthCustomParamInputDefinition[];
    getCredentialOption: GetCredentialOptionFunction<C, Env>;
    testConnection: (apiToken: AppCredential<"apiToken", any>["info"]) => Promise<boolean>;
};
declare type AnyAuthDefinition<C extends AppCredential<any>, Env extends AppEnv> = OAuth1Definition<C, Env> | OAuth2Definition<C, Env> | ApiTokenAuthDefinition<C, Env>;

declare type ActiveCampaignCredential = AppCredential<"apiToken", {
    apiUrl: string;
    apiKey: string;
}>;

declare const createAccount: {
    name: "Create account";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        url: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        url?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, {
        url?: {} | undefined;
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        url?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, ActiveCampaignCredential, AppEnv>;
    type: "thirdParty";
};

declare const createContact$3: {
    name: "Create contact";
    inputParamsSchema: zod.ZodObject<{
        list: zod.ZodOptional<zod.ZodString>;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        account: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        list?: string | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        account?: string | undefined;
        email: _rollouthq_common.RichEditorContent;
    }, {
        list?: string | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        account?: string | undefined;
        email: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        list?: string | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        account?: string | undefined;
        email: _rollouthq_common.RichEditorContent;
    }, ActiveCampaignCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$u_createAccount: typeof createAccount;
declare namespace actions$u {
  export {
    actions$u_createAccount as createAccount,
    createContact$3 as createContact,
  };
}

declare const activeCampaign: {
    name: "Active Campaign";
    auth: AnyAuthDefinition<ActiveCampaignCredential, {}>;
    actions: typeof actions$u;
};

declare type AsanaCredential = AppCredential<"oauth2">;

declare const createTask$1: {
    name: "Create a task";
    inputParamsSchema: zod.ZodObject<{
        workspace: zod.ZodString;
        project: zod.ZodString;
        assignee: zod.ZodString;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        notes: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        dueDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        notes?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        workspace: string;
        project: string;
        assignee: string;
    }, {
        notes?: {} | undefined;
        dueDate?: {} | undefined;
        name: {};
        workspace: string;
        project: string;
        assignee: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        notes?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        workspace: string;
        project: string;
        assignee: string;
    }, AsanaCredential, AppEnv>;
    type: "thirdParty";
};

declare const deleteTask: {
    name: "Delete a task";
    inputParamsSchema: zod.ZodObject<{
        taskId: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        taskId: _rollouthq_common.RichEditorContent;
    }, {
        taskId: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        taskId: _rollouthq_common.RichEditorContent;
    }, AsanaCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateTask$1: {
    name: "Update a task";
    inputParamsSchema: zod.ZodObject<{
        taskId: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        notes: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        dueDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        name?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        taskId: _rollouthq_common.RichEditorContent;
    }, {
        name?: {} | undefined;
        notes?: {} | undefined;
        dueDate?: {} | undefined;
        taskId: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        taskId: _rollouthq_common.RichEditorContent;
    }, AsanaCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$t_deleteTask: typeof deleteTask;
declare namespace actions$t {
  export {
    createTask$1 as createTask,
    actions$t_deleteTask as deleteTask,
    updateTask$1 as updateTask,
  };
}

declare const taskAdded$1: {
    name: "New Task";
    inputParamsSchema: zod.ZodObject<{
        workspace: zod.ZodString;
        project: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        workspace: string;
        project: string;
    }, {
        workspace: string;
        project: string;
    }>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }, {
        readonly key: "id";
        readonly label: "Task Id";
        readonly type: "string";
    }, {
        readonly key: "description";
        readonly label: "Task Description";
        readonly type: "string";
    }, {
        readonly key: "due_date";
        readonly label: "Task Due Date";
        readonly type: "string";
    }, {
        readonly key: "followers";
        readonly label: "Task Followers";
        readonly type: "string";
    }];
    setup({ automation, credential, inputParams, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: AsanaCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId }: {
        credential: AsanaCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation, startAutomationRun }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const taskChanged: {
    name: "Task Updated";
    inputParamsSchema: zod.ZodObject<{
        workspace: zod.ZodString;
        project: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        workspace: string;
        project: string;
    }, {
        workspace: string;
        project: string;
    }>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }, {
        readonly key: "id";
        readonly label: "Task Id";
        readonly type: "string";
    }, {
        readonly key: "description";
        readonly label: "Task Description";
        readonly type: "string";
    }, {
        readonly key: "due_date";
        readonly label: "Task Due Date";
        readonly type: "string";
    }, {
        readonly key: "followers";
        readonly label: "Task Followers";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: AsanaCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId }: {
        credential: AsanaCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation, startAutomationRun }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const taskDeleted: {
    name: "Task Deleted";
    inputParamsSchema: zod.ZodObject<{
        workspace: zod.ZodString;
        project: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        workspace: string;
        project: string;
    }, {
        workspace: string;
        project: string;
    }>;
    payloadSchema: readonly [{
        readonly key: "id";
        readonly label: "Task Id";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: AsanaCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId }: {
        credential: AsanaCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation, startAutomationRun }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const triggers$2_taskChanged: typeof taskChanged;
declare const triggers$2_taskDeleted: typeof taskDeleted;
declare namespace triggers$2 {
  export {
    taskAdded$1 as taskAdded,
    triggers$2_taskChanged as taskChanged,
    triggers$2_taskDeleted as taskDeleted,
  };
}

declare const asana: {
    name: "Asana";
    auth: AnyAuthDefinition<AsanaCredential, {
        ASANA_CLIENT_ID: string;
        ASANA_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        ASANA_CLIENT_ID: zod.ZodString;
        ASANA_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        ASANA_CLIENT_ID: string;
        ASANA_CLIENT_SECRET: string;
    }, {
        ASANA_CLIENT_ID: string;
        ASANA_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$t;
    triggers: typeof triggers$2;
};

declare type ClickupCredential = AppCredential<"oauth2WithoutRefresh">;

declare const createTask: {
    name: "Create Task";
    inputParamsSchema: zod.ZodObject<{
        team: zod.ZodString;
        space: zod.ZodString;
        folder: zod.ZodString;
        list: zod.ZodString;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        status: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        priority: zod.ZodOptional<zod.ZodString>;
        dueDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: _rollouthq_common.RichEditorContent | undefined;
        priority?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        list: string;
        team: string;
        space: string;
        folder: string;
    }, {
        status?: {} | undefined;
        priority?: string | undefined;
        dueDate?: {} | undefined;
        description?: {} | undefined;
        name: {};
        list: string;
        team: string;
        space: string;
        folder: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: _rollouthq_common.RichEditorContent | undefined;
        priority?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        list: string;
        team: string;
        space: string;
        folder: string;
    }, ClickupCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$s_createTask: typeof createTask;
declare namespace actions$s {
  export {
    actions$s_createTask as createTask,
  };
}

declare const clickup: {
    name: "Clickup";
    auth: AnyAuthDefinition<ClickupCredential, {
        CLICKUP_CLIENT_ID: string;
        CLICKUP_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        CLICKUP_CLIENT_ID: zod.ZodString;
        CLICKUP_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        CLICKUP_CLIENT_ID: string;
        CLICKUP_CLIENT_SECRET: string;
    }, {
        CLICKUP_CLIENT_ID: string;
        CLICKUP_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$s;
};

declare type CloseCredential = AppCredential<"apiToken", {
    apiKey: string;
}>;

declare const createLead$1: {
    name: "Create new Lead";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>;
        url: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        status: zod.ZodOptional<zod.ZodString>;
        contactName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        contactTitle: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        contactEmail: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        opportunityNote: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        opportunityConfidence: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        opportunityValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        note: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>;
        customFields: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodOptional<zod.ZodString>, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, RichEditorContent, {}>>]>>>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        url?: RichEditorContent | undefined;
        description?: RichEditorContent | undefined;
        contactName?: RichEditorContent | undefined;
        contactTitle?: RichEditorContent | undefined;
        contactEmail?: RichEditorContent | undefined;
        opportunityNote?: RichEditorContent | undefined;
        opportunityConfidence?: RichEditorContent | undefined;
        opportunityValue?: RichEditorContent | undefined;
        note?: RichEditorContent | undefined;
        customFields?: Record<string, string | RichEditorContent | undefined> | undefined;
        name: RichEditorContent;
    }, {
        status?: string | undefined;
        url?: {} | undefined;
        description?: {} | undefined;
        contactName?: {} | undefined;
        contactTitle?: {} | undefined;
        contactEmail?: {} | undefined;
        opportunityNote?: {} | undefined;
        opportunityConfidence?: {} | undefined;
        opportunityValue?: {} | undefined;
        note?: {} | undefined;
        customFields?: Record<string, string | {} | undefined> | undefined;
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        url?: RichEditorContent | undefined;
        description?: RichEditorContent | undefined;
        contactName?: RichEditorContent | undefined;
        contactTitle?: RichEditorContent | undefined;
        contactEmail?: RichEditorContent | undefined;
        opportunityNote?: RichEditorContent | undefined;
        opportunityConfidence?: RichEditorContent | undefined;
        opportunityValue?: RichEditorContent | undefined;
        note?: RichEditorContent | undefined;
        customFields?: Record<string, string | RichEditorContent | undefined> | undefined;
        name: RichEditorContent;
    }, CloseCredential, AppEnv>;
    type: "thirdParty";
};

declare namespace actions$r {
  export {
    createLead$1 as createLead,
  };
}

declare const close: {
    name: "Close";
    actions: typeof actions$r;
    auth: AnyAuthDefinition<CloseCredential, {}>;
};

declare type DiscordCredential = AppCredential<"oauth2", {
    guildId: string;
}>;

declare const sendChannelMessage$2: {
    name: "Send a channel message";
    inputParamsSchema: zod.ZodObject<{
        channel: zod.ZodString;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        botNickname: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        botNickname: _rollouthq_common.RichEditorContent;
        channel: string;
    }, {
        message: {};
        botNickname: {};
        channel: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        botNickname: _rollouthq_common.RichEditorContent;
        channel: string;
    }, DiscordCredential, AppEnv>;
    type: "thirdParty";
};

declare namespace actions$q {
  export {
    sendChannelMessage$2 as sendChannelMessage,
  };
}

declare const discord: {
    name: "Discord";
    auth: AnyAuthDefinition<DiscordCredential, {
        DISCORD_CLIENT_ID: string;
        DISCORD_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        DISCORD_CLIENT_ID: zod.ZodString;
        DISCORD_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        DISCORD_CLIENT_ID: string;
        DISCORD_CLIENT_SECRET: string;
    }, {
        DISCORD_CLIENT_ID: string;
        DISCORD_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$q;
};

declare type DropboxCredential = AppCredential<"oauth2">;

declare const uploadFile: {
    name: "Upload file";
    inputParamsSchema: zod.ZodObject<{
        folder: zod.ZodString;
        fileUrl: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        customFileName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        overwrite: zod.ZodOptional<zod.ZodString>;
    }, "strip", zod.ZodTypeAny, {
        customFileName?: _rollouthq_common.RichEditorContent | undefined;
        overwrite?: string | undefined;
        folder: string;
        fileUrl: _rollouthq_common.RichEditorContent;
    }, {
        customFileName?: {} | undefined;
        overwrite?: string | undefined;
        folder: string;
        fileUrl: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        customFileName?: _rollouthq_common.RichEditorContent | undefined;
        overwrite?: string | undefined;
        folder: string;
        fileUrl: _rollouthq_common.RichEditorContent;
    }, DropboxCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$p_uploadFile: typeof uploadFile;
declare namespace actions$p {
  export {
    actions$p_uploadFile as uploadFile,
  };
}

declare const fileSelected: {
    name: "Select file";
    inputParamsSchema: zod.ZodObject<{
        file: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        file: string;
    }, {
        file: string;
    }>;
    payloadSchema: readonly {
        key: string;
        label: string;
    }[];
    start: TaskTriggerExecuteFunction<{
        file: string;
    }, DropboxCredential, AppEnv>;
};

declare const taskTriggers_fileSelected: typeof fileSelected;
declare namespace taskTriggers {
  export {
    taskTriggers_fileSelected as fileSelected,
  };
}

declare const dropbox: {
    name: "Dropbox";
    actions: typeof actions$p;
    auth: AnyAuthDefinition<DropboxCredential, {
        DROPBOX_CLIENT_ID: string;
        DROPBOX_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        DROPBOX_CLIENT_ID: zod.ZodString;
        DROPBOX_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        DROPBOX_CLIENT_ID: string;
        DROPBOX_CLIENT_SECRET: string;
    }, {
        DROPBOX_CLIENT_ID: string;
        DROPBOX_CLIENT_SECRET: string;
    }>;
    taskTriggers: typeof taskTriggers;
};

declare type FreshsalesCredential = AppCredential<"apiToken", {
    name: string;
    subDomain: string;
    apiToken: string;
}>;

declare const createContact$2: {
    name: "Create Contact";
    inputParamsSchema: zod.ZodObject<{
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        emails: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        mobileNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        owner: zod.ZodOptional<zod.ZodString>;
        lifecycleStage: zod.ZodOptional<zod.ZodString>;
        facebook: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        twitter: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        linkedin: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        mobileNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        facebook?: _rollouthq_common.RichEditorContent | undefined;
        twitter?: _rollouthq_common.RichEditorContent | undefined;
        linkedin?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        emails: _rollouthq_common.RichEditorContent;
    }, {
        mobileNumber?: {} | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        facebook?: {} | undefined;
        twitter?: {} | undefined;
        linkedin?: {} | undefined;
        firstName: {};
        lastName: {};
        emails: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        mobileNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        facebook?: _rollouthq_common.RichEditorContent | undefined;
        twitter?: _rollouthq_common.RichEditorContent | undefined;
        linkedin?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        emails: _rollouthq_common.RichEditorContent;
    }, FreshsalesCredential, AppEnv>;
    type: "thirdParty";
};

declare namespace actions$o {
  export {
    createContact$2 as createContact,
  };
}

declare const freshsales: {
    name: "Freshsales";
    auth: AnyAuthDefinition<FreshsalesCredential, {}>;
    actions: typeof actions$o;
};

declare type FreshserviceCredential = AppCredential<"apiToken", {
    name: string;
    subDomain: string;
    apiToken: string;
}>;

declare const createRequester: {
    name: "Create Requester";
    inputParamsSchema: zod.ZodObject<{
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        mobilePhoneNumber: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        reportingManager: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        email: _rollouthq_common.RichEditorContent;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        mobilePhoneNumber: _rollouthq_common.RichEditorContent;
        reportingManager: string;
    }, {
        email: {};
        firstName: {};
        lastName: {};
        mobilePhoneNumber: {};
        reportingManager: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email: _rollouthq_common.RichEditorContent;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        mobilePhoneNumber: _rollouthq_common.RichEditorContent;
        reportingManager: string;
    }, FreshserviceCredential, AppEnv>;
    type: "thirdParty";
};

declare const createTicket$1: {
    name: "Create Ticket";
    inputParamsSchema: zod.ZodObject<{
        requesterId: zod.ZodString;
        description: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        status: zod.ZodString;
        subject: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        priority: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        status: string;
        priority: string;
        description: _rollouthq_common.RichEditorContent;
        requesterId: string;
        subject: _rollouthq_common.RichEditorContent;
    }, {
        status: string;
        priority: string;
        description: {};
        requesterId: string;
        subject: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status: string;
        priority: string;
        description: _rollouthq_common.RichEditorContent;
        requesterId: string;
        subject: _rollouthq_common.RichEditorContent;
    }, FreshserviceCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$n_createRequester: typeof createRequester;
declare namespace actions$n {
  export {
    actions$n_createRequester as createRequester,
    createTicket$1 as createTicket,
  };
}

declare const freshservice: {
    name: "Freshservice";
    auth: AnyAuthDefinition<FreshserviceCredential, {}>;
    actions: typeof actions$n;
};

declare type GoogleCredential = AppCredential<"oauth2">;

declare const sendEmail$1: {
    name: "Send an email";
    inputParamsSchema: zod.ZodObject<{
        to: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        subject: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
    }, {
        message: {};
        subject: {};
        to: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
    }, GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare namespace actions$m {
  export {
    sendEmail$1 as sendEmail,
  };
}

declare const gmail: {
    name: "Gmail";
    auth: AnyAuthDefinition<GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        GOOGLE_CLIENT_ID: zod.ZodString;
        GOOGLE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$m;
};

declare const createEvent$1: {
    name: "Create an event";
    inputParamsSchema: zod.ZodObject<{
        attendees: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        title: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        time: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        timezone: zod.ZodString;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        location: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        duration: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        description?: _rollouthq_common.RichEditorContent | undefined;
        location?: _rollouthq_common.RichEditorContent | undefined;
        duration?: _rollouthq_common.RichEditorContent | undefined;
        title: _rollouthq_common.RichEditorContent;
        attendees: _rollouthq_common.RichEditorContent;
        time: _rollouthq_common.RichEditorContent;
        timezone: string;
    }, {
        description?: {} | undefined;
        location?: {} | undefined;
        duration?: {} | undefined;
        title: {};
        attendees: {};
        time: {};
        timezone: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        description?: _rollouthq_common.RichEditorContent | undefined;
        location?: _rollouthq_common.RichEditorContent | undefined;
        duration?: _rollouthq_common.RichEditorContent | undefined;
        title: _rollouthq_common.RichEditorContent;
        attendees: _rollouthq_common.RichEditorContent;
        time: _rollouthq_common.RichEditorContent;
        timezone: string;
    }, GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare namespace actions$l {
  export {
    createEvent$1 as createEvent,
  };
}

declare const googleCalendar: {
    name: "Google Calendar";
    auth: AnyAuthDefinition<GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        GOOGLE_CLIENT_ID: zod.ZodString;
        GOOGLE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$l;
};

declare const editDocument: {
    name: "Edit a document";
    inputParamsSchema: zod.ZodObject<{
        documentId: zod.ZodString;
        fields: zod.ZodRecord<zod.ZodString, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, "strip", zod.ZodTypeAny, {
        documentId: string;
        fields: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, {
        documentId: string;
        fields: Record<string, {} | undefined>;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        documentId: string;
        fields: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$k_editDocument: typeof editDocument;
declare namespace actions$k {
  export {
    actions$k_editDocument as editDocument,
  };
}

declare const googleDocs: {
    name: "Google Docs";
    auth: AnyAuthDefinition<GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        GOOGLE_CLIENT_ID: zod.ZodString;
        GOOGLE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$k;
};

declare const addRow$1: {
    name: "Add a row";
    inputParamsSchema: zod.ZodObject<{
        spreadsheetId: zod.ZodString;
        sheetId: zod.ZodString;
        columns: zod.ZodRecord<zod.ZodString, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, "strip", zod.ZodTypeAny, {
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, {
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, {} | undefined>;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const submitData: {
    name: "Submit data to sheet";
    inputParamsSchema: zod.ZodObject<{
        spreadsheetId: zod.ZodString;
        sheetId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        spreadsheetId: string;
        sheetId: string;
    }, {
        spreadsheetId: string;
        sheetId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        spreadsheetId: string;
        sheetId: string;
    }, GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$j_submitData: typeof submitData;
declare namespace actions$j {
  export {
    addRow$1 as addRow,
    actions$j_submitData as submitData,
  };
}

declare const googleSheets: {
    name: "Google Sheets";
    auth: AnyAuthDefinition<GoogleCredential, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        GOOGLE_CLIENT_ID: zod.ZodString;
        GOOGLE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }, {
        GOOGLE_CLIENT_ID: string;
        GOOGLE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$j;
};

declare type HubspotCredential = AppCredential<"oauth2">;

declare const createDeal: {
    name: "Create deal";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        stage: zod.ZodOptional<zod.ZodString>;
        owner: zod.ZodOptional<zod.ZodString>;
        type: zod.ZodOptional<zod.ZodString>;
        company: zod.ZodOptional<zod.ZodString>;
        contact: zod.ZodOptional<zod.ZodString>;
        amount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        closeDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        type?: string | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, {
        type?: string | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: {} | undefined;
        closeDate?: {} | undefined;
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        type?: string | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, HubspotCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateDeal$1: {
    name: "Update deal";
    inputParamsSchema: zod.ZodObject<{
        deal: zod.ZodString;
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        stage: zod.ZodOptional<zod.ZodString>;
        owner: zod.ZodOptional<zod.ZodString>;
        type: zod.ZodOptional<zod.ZodString>;
        company: zod.ZodOptional<zod.ZodString>;
        contact: zod.ZodOptional<zod.ZodString>;
        amount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        closeDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        type?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        deal: string;
    }, {
        type?: string | undefined;
        name?: {} | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: {} | undefined;
        closeDate?: {} | undefined;
        deal: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        type?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        contact?: string | undefined;
        stage?: string | undefined;
        company?: string | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        deal: string;
    }, HubspotCredential, AppEnv>;
    type: "thirdParty";
};

declare const createContact$1: {
    name: "Create contact";
    inputParamsSchema: zod.ZodObject<{
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        jobTitle: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        owner: zod.ZodOptional<zod.ZodString>;
        lifecycleStage: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodString>;
        allowMarketing: zod.ZodOptional<zod.ZodBoolean>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
    }, {
        status?: string | undefined;
        email?: {} | undefined;
        phoneNumber?: {} | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: {} | undefined;
        allowMarketing?: boolean | undefined;
        firstName: {};
        lastName: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
    }, HubspotCredential, AppEnv>;
    type: "thirdParty";
};

declare const createOrUpdateContact: {
    name: "Create or update contact";
    inputParamsSchema: zod.ZodObject<{
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        jobTitle: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        owner: zod.ZodOptional<zod.ZodString>;
        lifecycleStage: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodString>;
        allowMarketing: zod.ZodOptional<zod.ZodBoolean>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
    }, {
        status?: string | undefined;
        email?: {} | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: {} | undefined;
        allowMarketing?: boolean | undefined;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
    }, HubspotCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateContact$1: {
    name: "Update contact";
    inputParamsSchema: zod.ZodObject<{
        contact: zod.ZodString;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        jobTitle: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        owner: zod.ZodOptional<zod.ZodString>;
        lifecycleStage: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodString>;
        allowMarketing: zod.ZodOptional<zod.ZodBoolean>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
        contact: string;
    }, {
        status?: string | undefined;
        email?: {} | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: {} | undefined;
        allowMarketing?: boolean | undefined;
        contact: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        owner?: string | undefined;
        lifecycleStage?: string | undefined;
        jobTitle?: _rollouthq_common.RichEditorContent | undefined;
        allowMarketing?: boolean | undefined;
        contact: string;
    }, HubspotCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$i_createDeal: typeof createDeal;
declare const actions$i_createOrUpdateContact: typeof createOrUpdateContact;
declare namespace actions$i {
  export {
    actions$i_createDeal as createDeal,
    updateDeal$1 as updateDeal,
    createContact$1 as createContact,
    actions$i_createOrUpdateContact as createOrUpdateContact,
    updateContact$1 as updateContact,
  };
}

declare const hubspot: {
    name: "Hubspot";
    auth: AnyAuthDefinition<HubspotCredential, {
        HUBSPOT_CLIENT_ID: string;
        HUBSPOT_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        HUBSPOT_CLIENT_ID: zod.ZodString;
        HUBSPOT_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        HUBSPOT_CLIENT_ID: string;
        HUBSPOT_CLIENT_SECRET: string;
    }, {
        HUBSPOT_CLIENT_ID: string;
        HUBSPOT_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$i;
};

declare type IntercomCredential = AppCredential<"oauth2WithoutRefresh">;

declare const createLead: {
    name: "Create lead";
    inputParamsSchema: zod.ZodObject<{
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        phone?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        email: _rollouthq_common.RichEditorContent;
    }, {
        phone?: {} | undefined;
        name: {};
        email: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        phone?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        email: _rollouthq_common.RichEditorContent;
    }, IntercomCredential, AppEnv>;
    type: "thirdParty";
};

declare const createUser$1: {
    name: "Create user";
    inputParamsSchema: zod.ZodObject<{
        userId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        userId?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        email: _rollouthq_common.RichEditorContent;
    }, {
        userId?: {} | undefined;
        phone?: {} | undefined;
        name: {};
        email: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        userId?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        email: _rollouthq_common.RichEditorContent;
    }, IntercomCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$h_createLead: typeof createLead;
declare namespace actions$h {
  export {
    actions$h_createLead as createLead,
    createUser$1 as createUser,
  };
}

declare const intercom: {
    name: "Intercom";
    auth: AnyAuthDefinition<IntercomCredential, {
        INTERCOM_CLIENT_ID: string;
        INTERCOM_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        INTERCOM_CLIENT_ID: zod.ZodString;
        INTERCOM_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        INTERCOM_CLIENT_ID: string;
        INTERCOM_CLIENT_SECRET: string;
    }, {
        INTERCOM_CLIENT_ID: string;
        INTERCOM_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$h;
};

declare type JiraCredential = AppCredential<"oauth2">;

declare const addCommentToIssue: {
    name: "Add a comment to an issue";
    inputParamsSchema: zod.ZodObject<{
        cloudProjectId: zod.ZodString;
        key: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        comment: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        key: _rollouthq_common.RichEditorContent;
        cloudProjectId: string;
        comment: _rollouthq_common.RichEditorContent;
    }, {
        key: {};
        cloudProjectId: string;
        comment: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        key: _rollouthq_common.RichEditorContent;
        cloudProjectId: string;
        comment: _rollouthq_common.RichEditorContent;
    }, JiraCredential, AppEnv>;
    type: "thirdParty";
};

declare const createIssue: {
    name: "Create an issue";
    inputParamsSchema: zod.ZodObject<{
        cloudProjectId: zod.ZodString;
        projectId: zod.ZodString;
        issueType: zod.ZodString;
        reporter: zod.ZodString;
        summary: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        description: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        description: _rollouthq_common.RichEditorContent;
        cloudProjectId: string;
        projectId: string;
        issueType: string;
        reporter: string;
        summary: _rollouthq_common.RichEditorContent;
    }, {
        description: {};
        cloudProjectId: string;
        projectId: string;
        issueType: string;
        reporter: string;
        summary: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        description: _rollouthq_common.RichEditorContent;
        cloudProjectId: string;
        projectId: string;
        issueType: string;
        reporter: string;
        summary: _rollouthq_common.RichEditorContent;
    }, JiraCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$g_addCommentToIssue: typeof addCommentToIssue;
declare const actions$g_createIssue: typeof createIssue;
declare namespace actions$g {
  export {
    actions$g_addCommentToIssue as addCommentToIssue,
    actions$g_createIssue as createIssue,
  };
}

declare const jiraSoftwareCloud: {
    name: "Jira Software Cloud";
    auth: AnyAuthDefinition<JiraCredential, {
        JIRA_CLIENT_ID: string;
        JIRA_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        JIRA_CLIENT_ID: zod.ZodString;
        JIRA_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        JIRA_CLIENT_ID: string;
        JIRA_CLIENT_SECRET: string;
    }, {
        JIRA_CLIENT_ID: string;
        JIRA_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$g;
};

declare type KlaviyoCredential = AppCredential<"apiToken", {
    publicApiKey: string;
    privateApiKey: string;
    companyName: string;
}>;

declare const addSubscriber: {
    name: "Add Subscriber";
    inputParamsSchema: zod.ZodObject<{
        list: zod.ZodString;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        title: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        organization: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        city: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        region: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        country: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        zip: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        imageUrl: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        title?: _rollouthq_common.RichEditorContent | undefined;
        region?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        organization?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        zip?: _rollouthq_common.RichEditorContent | undefined;
        imageUrl?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        list: string;
    }, {
        title?: {} | undefined;
        region?: {} | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        organization?: {} | undefined;
        city?: {} | undefined;
        country?: {} | undefined;
        zip?: {} | undefined;
        imageUrl?: {} | undefined;
        email: {};
        list: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        title?: _rollouthq_common.RichEditorContent | undefined;
        region?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        organization?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        zip?: _rollouthq_common.RichEditorContent | undefined;
        imageUrl?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        list: string;
    }, KlaviyoCredential, AppEnv>;
    type: "thirdParty";
};

declare const createEvent: {
    name: "Create Event";
    inputParamsSchema: zod.ZodObject<{
        metric: zod.ZodString;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        eventId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        value: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        value?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        eventId?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        metric: string;
    }, {
        value?: {} | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        eventId?: {} | undefined;
        email: {};
        metric: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        value?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        eventId?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        metric: string;
    }, KlaviyoCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$f_addSubscriber: typeof addSubscriber;
declare const actions$f_createEvent: typeof createEvent;
declare namespace actions$f {
  export {
    actions$f_addSubscriber as addSubscriber,
    actions$f_createEvent as createEvent,
  };
}

declare const klaviyo: {
    name: "Klaviyo";
    auth: AnyAuthDefinition<KlaviyoCredential, {}>;
    actions: typeof actions$f;
};

declare type MailchimpCredential = AppCredential<"oauth2WithoutRefresh", {
    accessToken: string;
    server: string;
}>;

declare const createSubscriber: {
    name: "Create a subscriber";
    inputParamsSchema: zod.ZodObject<{
        listId: zod.ZodString;
        statusId: zod.ZodString;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phoneNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        listId: string;
        statusId: string;
    }, {
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        phoneNumber?: {} | undefined;
        email: {};
        listId: string;
        statusId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        phoneNumber?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        listId: string;
        statusId: string;
    }, MailchimpCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$e_createSubscriber: typeof createSubscriber;
declare namespace actions$e {
  export {
    actions$e_createSubscriber as createSubscriber,
  };
}

declare const mailchimp: {
    name: "Mailchimp";
    auth: AnyAuthDefinition<MailchimpCredential, {
        MAILCHIMP_CLIENT_ID: string;
        MAILCHIMP_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        MAILCHIMP_CLIENT_ID: zod.ZodString;
        MAILCHIMP_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        MAILCHIMP_CLIENT_ID: string;
        MAILCHIMP_CLIENT_SECRET: string;
    }, {
        MAILCHIMP_CLIENT_ID: string;
        MAILCHIMP_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$e;
};

declare type MicrosoftCredential = AppCredential<"oauth2">;

declare const addRow: {
    name: "Add row";
    inputParamsSchema: zod.ZodObject<{
        spreadsheetId: zod.ZodString;
        sheetId: zod.ZodString;
        columns: zod.ZodRecord<zod.ZodString, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, "strip", zod.ZodTypeAny, {
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, {
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, {} | undefined>;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        spreadsheetId: string;
        sheetId: string;
        columns: Record<string, _rollouthq_common.RichEditorContent | undefined>;
    }, MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$d_addRow: typeof addRow;
declare namespace actions$d {
  export {
    actions$d_addRow as addRow,
  };
}

declare const microsoftExcel: {
    name: "Microsoft Excel";
    auth: AnyAuthDefinition<MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        MICROSOFT_CLIENT_ID: zod.ZodString;
        MICROSOFT_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$d;
};

declare type MondayCredential = AppCredential<"oauth2WithoutRefresh", {
    accessToken: string;
    scope: string;
}>;

declare const addGroup: {
    name: "Add Group";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        board: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        board: string;
    }, {
        name: {};
        board: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        board: string;
    }, MondayCredential, AppEnv>;
    type: "thirdParty";
};

declare const addItem: {
    name: "Add Item";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        group: zod.ZodString;
        board: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        group: string;
        board: string;
    }, {
        name: {};
        group: string;
        board: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        group: string;
        board: string;
    }, MondayCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$c_addGroup: typeof addGroup;
declare const actions$c_addItem: typeof addItem;
declare namespace actions$c {
  export {
    actions$c_addGroup as addGroup,
    actions$c_addItem as addItem,
  };
}

declare const monday: {
    name: "Monday";
    auth: AnyAuthDefinition<MondayCredential, {
        MONDAY_CLIENT_ID: string;
        MONDAY_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        MONDAY_CLIENT_ID: zod.ZodString;
        MONDAY_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        MONDAY_CLIENT_ID: string;
        MONDAY_CLIENT_SECRET: string;
    }, {
        MONDAY_CLIENT_ID: string;
        MONDAY_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$c;
};

declare const createChannel: {
    name: "Create a channel";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        teamId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        description?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        teamId: string;
    }, {
        description?: {} | undefined;
        name: {};
        teamId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        description?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        teamId: string;
    }, MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const sendChannelMessage$1: {
    name: "Send a channel message";
    inputParamsSchema: zod.ZodObject<{
        channelId: zod.ZodString;
        teamId: zod.ZodString;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        teamId: string;
        channelId: string;
    }, {
        message: {};
        teamId: string;
        channelId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        teamId: string;
        channelId: string;
    }, MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const sendChatMessage: {
    name: "Send a chat message";
    inputParamsSchema: zod.ZodObject<{
        chatId: zod.ZodString;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        chatId: string;
    }, {
        message: {};
        chatId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        chatId: string;
    }, MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$b_createChannel: typeof createChannel;
declare const actions$b_sendChatMessage: typeof sendChatMessage;
declare namespace actions$b {
  export {
    actions$b_createChannel as createChannel,
    sendChannelMessage$1 as sendChannelMessage,
    actions$b_sendChatMessage as sendChatMessage,
  };
}

declare const msTeams: {
    name: "Microsoft Teams";
    auth: AnyAuthDefinition<MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        MICROSOFT_CLIENT_ID: zod.ZodString;
        MICROSOFT_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$b;
};

declare const sendEmail: {
    name: "Send an email";
    inputParamsSchema: zod.ZodObject<{
        to: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        subject: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
    }, {
        message: {};
        subject: {};
        to: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
    }, MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$a_sendEmail: typeof sendEmail;
declare namespace actions$a {
  export {
    actions$a_sendEmail as sendEmail,
  };
}

declare const outlookMail: {
    name: "Outlook Mail";
    auth: AnyAuthDefinition<MicrosoftCredential, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        MICROSOFT_CLIENT_ID: zod.ZodString;
        MICROSOFT_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }, {
        MICROSOFT_CLIENT_ID: string;
        MICROSOFT_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$a;
};

declare type PipedriveCredential = AppCredential<"oauth2", {
    apiDomain: string;
}>;

declare const addDeal: {
    name: "Add a deal";
    inputParamsSchema: zod.ZodObject<{
        title: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        value: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        currency: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        userId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        personId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        orgId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        pipelineId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        stageId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        status: zod.ZodOptional<zod.ZodString>;
        expectedCloseDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        probability: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lostReason: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        value?: _rollouthq_common.RichEditorContent | undefined;
        userId?: _rollouthq_common.RichEditorContent | undefined;
        personId?: _rollouthq_common.RichEditorContent | undefined;
        currency?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        pipelineId?: _rollouthq_common.RichEditorContent | undefined;
        stageId?: _rollouthq_common.RichEditorContent | undefined;
        expectedCloseDate?: _rollouthq_common.RichEditorContent | undefined;
        probability?: _rollouthq_common.RichEditorContent | undefined;
        lostReason?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        title: _rollouthq_common.RichEditorContent;
    }, {
        status?: string | undefined;
        value?: {} | undefined;
        userId?: {} | undefined;
        personId?: {} | undefined;
        currency?: {} | undefined;
        orgId?: {} | undefined;
        pipelineId?: {} | undefined;
        stageId?: {} | undefined;
        expectedCloseDate?: {} | undefined;
        probability?: {} | undefined;
        lostReason?: {} | undefined;
        visibleTo?: string | undefined;
        addTime?: {} | undefined;
        title: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        value?: _rollouthq_common.RichEditorContent | undefined;
        userId?: _rollouthq_common.RichEditorContent | undefined;
        personId?: _rollouthq_common.RichEditorContent | undefined;
        currency?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        pipelineId?: _rollouthq_common.RichEditorContent | undefined;
        stageId?: _rollouthq_common.RichEditorContent | undefined;
        expectedCloseDate?: _rollouthq_common.RichEditorContent | undefined;
        probability?: _rollouthq_common.RichEditorContent | undefined;
        lostReason?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        title: _rollouthq_common.RichEditorContent;
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const addOrganization: {
    name: "Add an organization";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        ownerId: zod.ZodString;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        visibleTo?: string | undefined;
        name: _rollouthq_common.RichEditorContent;
        addTime: _rollouthq_common.RichEditorContent;
        ownerId: string;
    }, {
        visibleTo?: string | undefined;
        name: {};
        addTime: {};
        ownerId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        visibleTo?: string | undefined;
        name: _rollouthq_common.RichEditorContent;
        addTime: _rollouthq_common.RichEditorContent;
        ownerId: string;
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const addPerson: {
    name: "Add a person";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        ownerId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        orgId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, {
        email?: {} | undefined;
        phone?: {} | undefined;
        orgId?: {} | undefined;
        visibleTo?: string | undefined;
        addTime?: {} | undefined;
        ownerId?: {} | undefined;
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const updateDeal: {
    name: "Update a deal";
    inputParamsSchema: zod.ZodObject<{
        dealId: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        title: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        value: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        currency: zod.ZodOptional<zod.ZodString>;
        userId: zod.ZodOptional<zod.ZodString>;
        personId: zod.ZodOptional<zod.ZodString>;
        orgId: zod.ZodOptional<zod.ZodString>;
        pipelineId: zod.ZodOptional<zod.ZodString>;
        stageId: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodString>;
        expectedCloseDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        probability: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lostReason: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        value?: _rollouthq_common.RichEditorContent | undefined;
        filter?: string | undefined;
        title?: _rollouthq_common.RichEditorContent | undefined;
        userId?: string | undefined;
        personId?: string | undefined;
        currency?: string | undefined;
        orgId?: string | undefined;
        pipelineId?: string | undefined;
        stageId?: string | undefined;
        expectedCloseDate?: _rollouthq_common.RichEditorContent | undefined;
        probability?: _rollouthq_common.RichEditorContent | undefined;
        lostReason?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        dealId?: string | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, {
        status?: string | undefined;
        value?: {} | undefined;
        filter?: string | undefined;
        title?: {} | undefined;
        userId?: string | undefined;
        personId?: string | undefined;
        currency?: string | undefined;
        orgId?: string | undefined;
        pipelineId?: string | undefined;
        stageId?: string | undefined;
        expectedCloseDate?: {} | undefined;
        probability?: {} | undefined;
        lostReason?: {} | undefined;
        visibleTo?: string | undefined;
        addTime?: {} | undefined;
        dealId?: string | undefined;
        filterValue?: {} | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        value?: _rollouthq_common.RichEditorContent | undefined;
        filter?: string | undefined;
        title?: _rollouthq_common.RichEditorContent | undefined;
        userId?: string | undefined;
        personId?: string | undefined;
        currency?: string | undefined;
        orgId?: string | undefined;
        pipelineId?: string | undefined;
        stageId?: string | undefined;
        expectedCloseDate?: _rollouthq_common.RichEditorContent | undefined;
        probability?: _rollouthq_common.RichEditorContent | undefined;
        lostReason?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        dealId?: string | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const updateOrganization: {
    name: "Update an organization";
    inputParamsSchema: zod.ZodObject<{
        orgId: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        ownerId: zod.ZodOptional<zod.ZodString>;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: string | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: string | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        name?: {} | undefined;
        orgId?: string | undefined;
        visibleTo?: string | undefined;
        addTime?: {} | undefined;
        ownerId?: string | undefined;
        filterValue?: {} | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        orgId?: string | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: string | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const updatePerson: {
    name: "Update a person";
    inputParamsSchema: zod.ZodObject<{
        personId: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        ownerId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        orgId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        visibleTo: zod.ZodOptional<zod.ZodString>;
        addTime: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        personId?: string | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        name?: {} | undefined;
        email?: {} | undefined;
        phone?: {} | undefined;
        personId?: string | undefined;
        orgId?: {} | undefined;
        visibleTo?: string | undefined;
        addTime?: {} | undefined;
        ownerId?: {} | undefined;
        filterValue?: {} | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        personId?: string | undefined;
        orgId?: _rollouthq_common.RichEditorContent | undefined;
        visibleTo?: string | undefined;
        addTime?: _rollouthq_common.RichEditorContent | undefined;
        ownerId?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$9_addDeal: typeof addDeal;
declare const actions$9_addOrganization: typeof addOrganization;
declare const actions$9_addPerson: typeof addPerson;
declare const actions$9_updateDeal: typeof updateDeal;
declare const actions$9_updateOrganization: typeof updateOrganization;
declare const actions$9_updatePerson: typeof updatePerson;
declare namespace actions$9 {
  export {
    actions$9_addDeal as addDeal,
    actions$9_addOrganization as addOrganization,
    actions$9_addPerson as addPerson,
    actions$9_updateDeal as updateDeal,
    actions$9_updateOrganization as updateOrganization,
    actions$9_updatePerson as updatePerson,
  };
}

declare const pipedrive: {
    name: "Pipedrive";
    auth: AnyAuthDefinition<PipedriveCredential, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        PIPEDRIVE_CLIENT_ID: zod.ZodString;
        PIPEDRIVE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }, {
        PIPEDRIVE_CLIENT_ID: string;
        PIPEDRIVE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$9;
};

declare type QuickBooksOnlineCredential = AppCredential<"oauth2", {
    idToken: string;
    realmid: string;
    refreshTokenExpiryDate: string;
}>;

declare const createCustomer$1: {
    name: "Create Customer";
    inputParamsSchema: zod.ZodObject<{
        displayName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        city: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        country: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        state: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        line1: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        postalCode: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        companyName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        familyName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        givenName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        notes: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        title: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        title?: _rollouthq_common.RichEditorContent | undefined;
        companyName?: _rollouthq_common.RichEditorContent | undefined;
        givenName?: _rollouthq_common.RichEditorContent | undefined;
        familyName?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        line1?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        displayName: _rollouthq_common.RichEditorContent;
    }, {
        email?: {} | undefined;
        state?: {} | undefined;
        title?: {} | undefined;
        companyName?: {} | undefined;
        givenName?: {} | undefined;
        familyName?: {} | undefined;
        notes?: {} | undefined;
        city?: {} | undefined;
        country?: {} | undefined;
        line1?: {} | undefined;
        postalCode?: {} | undefined;
        displayName: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        title?: _rollouthq_common.RichEditorContent | undefined;
        companyName?: _rollouthq_common.RichEditorContent | undefined;
        givenName?: _rollouthq_common.RichEditorContent | undefined;
        familyName?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        line1?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        displayName: _rollouthq_common.RichEditorContent;
    }, QuickBooksOnlineCredential, AppEnv>;
    type: "thirdParty";
};

declare const createInvoice$1: {
    name: "Create Invoice";
    inputParamsSchema: zod.ZodObject<{
        customer: zod.ZodString;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        qty: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        unitPrice: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lineNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        value: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        amount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        value?: _rollouthq_common.RichEditorContent | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        qty?: _rollouthq_common.RichEditorContent | undefined;
        unitPrice?: _rollouthq_common.RichEditorContent | undefined;
        lineNumber?: _rollouthq_common.RichEditorContent | undefined;
        customer: string;
    }, {
        value?: {} | undefined;
        name?: {} | undefined;
        description?: {} | undefined;
        amount?: {} | undefined;
        qty?: {} | undefined;
        unitPrice?: {} | undefined;
        lineNumber?: {} | undefined;
        customer: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        value?: _rollouthq_common.RichEditorContent | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        amount?: _rollouthq_common.RichEditorContent | undefined;
        qty?: _rollouthq_common.RichEditorContent | undefined;
        unitPrice?: _rollouthq_common.RichEditorContent | undefined;
        lineNumber?: _rollouthq_common.RichEditorContent | undefined;
        customer: string;
    }, QuickBooksOnlineCredential, AppEnv>;
    type: "thirdParty";
};

declare namespace actions$8 {
  export {
    createCustomer$1 as createCustomer,
    createInvoice$1 as createInvoice,
  };
}

declare const quickbooksOnline: {
    name: "Quickbooks online";
    auth: AnyAuthDefinition<QuickBooksOnlineCredential, {
        QUICKBOOKS_ONLINE_CLIENT_ID: string;
        QUICKBOOKS_ONLINE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        QUICKBOOKS_ONLINE_CLIENT_ID: zod.ZodString;
        QUICKBOOKS_ONLINE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        QUICKBOOKS_ONLINE_CLIENT_ID: string;
        QUICKBOOKS_ONLINE_CLIENT_SECRET: string;
    }, {
        QUICKBOOKS_ONLINE_CLIENT_ID: string;
        QUICKBOOKS_ONLINE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$8;
};

declare type SalesforceCredential = AppCredential<"oauth2", {
    userProfileUrl: string;
}>;

declare const addNewAccount: {
    name: "Add a new account";
    inputParamsSchema: zod.ZodObject<{
        accountName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        website: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        accountNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        billingStreet: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        billingCity: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        billingState: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        billingPostalCode: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        billingCountry: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        shippingStreet: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        shippingCity: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        shippingState: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        shippingPostalCode: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        shippingCountry: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        type: zod.ZodOptional<zod.ZodString>;
        industry: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        parentAccount: zod.ZodOptional<zod.ZodString>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        type?: string | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        website?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        billingStreet?: _rollouthq_common.RichEditorContent | undefined;
        billingCity?: _rollouthq_common.RichEditorContent | undefined;
        billingState?: _rollouthq_common.RichEditorContent | undefined;
        billingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        billingCountry?: _rollouthq_common.RichEditorContent | undefined;
        shippingStreet?: _rollouthq_common.RichEditorContent | undefined;
        shippingCity?: _rollouthq_common.RichEditorContent | undefined;
        shippingState?: _rollouthq_common.RichEditorContent | undefined;
        shippingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        shippingCountry?: _rollouthq_common.RichEditorContent | undefined;
        industry?: _rollouthq_common.RichEditorContent | undefined;
        parentAccount?: string | undefined;
        accountName: _rollouthq_common.RichEditorContent;
    }, {
        type?: string | undefined;
        description?: {} | undefined;
        phone?: {} | undefined;
        website?: {} | undefined;
        accountNumber?: {} | undefined;
        billingStreet?: {} | undefined;
        billingCity?: {} | undefined;
        billingState?: {} | undefined;
        billingPostalCode?: {} | undefined;
        billingCountry?: {} | undefined;
        shippingStreet?: {} | undefined;
        shippingCity?: {} | undefined;
        shippingState?: {} | undefined;
        shippingPostalCode?: {} | undefined;
        shippingCountry?: {} | undefined;
        industry?: {} | undefined;
        parentAccount?: string | undefined;
        accountName: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        type?: string | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        website?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        billingStreet?: _rollouthq_common.RichEditorContent | undefined;
        billingCity?: _rollouthq_common.RichEditorContent | undefined;
        billingState?: _rollouthq_common.RichEditorContent | undefined;
        billingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        billingCountry?: _rollouthq_common.RichEditorContent | undefined;
        shippingStreet?: _rollouthq_common.RichEditorContent | undefined;
        shippingCity?: _rollouthq_common.RichEditorContent | undefined;
        shippingState?: _rollouthq_common.RichEditorContent | undefined;
        shippingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        shippingCountry?: _rollouthq_common.RichEditorContent | undefined;
        industry?: _rollouthq_common.RichEditorContent | undefined;
        parentAccount?: string | undefined;
        accountName: _rollouthq_common.RichEditorContent;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const addNewContactToCampaign: {
    name: "Add a new contact to campaign";
    inputParamsSchema: zod.ZodObject<{
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mobilePhone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mailingStreet: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mailingCity: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mailingState: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mailingPostalCode: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        mailingCountry: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        campaignId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        mobilePhone?: _rollouthq_common.RichEditorContent | undefined;
        mailingStreet?: _rollouthq_common.RichEditorContent | undefined;
        mailingCity?: _rollouthq_common.RichEditorContent | undefined;
        mailingState?: _rollouthq_common.RichEditorContent | undefined;
        mailingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        mailingCountry?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        campaignId: string;
    }, {
        email?: {} | undefined;
        phone?: {} | undefined;
        mobilePhone?: {} | undefined;
        mailingStreet?: {} | undefined;
        mailingCity?: {} | undefined;
        mailingState?: {} | undefined;
        mailingPostalCode?: {} | undefined;
        mailingCountry?: {} | undefined;
        firstName: {};
        lastName: {};
        campaignId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        mobilePhone?: _rollouthq_common.RichEditorContent | undefined;
        mailingStreet?: _rollouthq_common.RichEditorContent | undefined;
        mailingCity?: _rollouthq_common.RichEditorContent | undefined;
        mailingState?: _rollouthq_common.RichEditorContent | undefined;
        mailingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        mailingCountry?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        campaignId: string;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const addNewContact: {
    name: "Add a new contact";
    inputParamsSchema: zod.ZodObject<{
        fields: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>>;
    }, "strip", zod.ZodTypeAny, {
        fields?: Record<string, _rollouthq_common.RichEditorContent | undefined> | undefined;
    }, {
        fields?: Record<string, {} | undefined> | undefined;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        fields?: Record<string, _rollouthq_common.RichEditorContent | undefined> | undefined;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const addNewLead: {
    name: "Add a new lead";
    inputParamsSchema: zod.ZodObject<{
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        company: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        street: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        city: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        state: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        postalCode: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        country: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        street?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        company: _rollouthq_common.RichEditorContent;
    }, {
        email?: {} | undefined;
        state?: {} | undefined;
        phone?: {} | undefined;
        city?: {} | undefined;
        country?: {} | undefined;
        postalCode?: {} | undefined;
        street?: {} | undefined;
        firstName: {};
        lastName: {};
        company: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        street?: _rollouthq_common.RichEditorContent | undefined;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
        company: _rollouthq_common.RichEditorContent;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const addNewOpportunity: {
    name: "Add a new opportunity";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        stage: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        closeDate: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        primaryCampaign: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        stage: _rollouthq_common.RichEditorContent;
        closeDate: _rollouthq_common.RichEditorContent;
        primaryCampaign: string;
    }, {
        name: {};
        stage: {};
        closeDate: {};
        primaryCampaign: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        stage: _rollouthq_common.RichEditorContent;
        closeDate: _rollouthq_common.RichEditorContent;
        primaryCampaign: string;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const addNewTask: {
    name: "Add a new task";
    inputParamsSchema: zod.ZodObject<{
        assignedTo: zod.ZodString;
        status: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        subject: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        priority: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        relatedTo: zod.ZodOptional<zod.ZodString>;
        dueDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        name: zod.ZodOptional<zod.ZodString>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        name?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        relatedTo?: string | undefined;
        status: _rollouthq_common.RichEditorContent;
        priority: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        assignedTo: string;
    }, {
        name?: string | undefined;
        dueDate?: {} | undefined;
        description?: {} | undefined;
        relatedTo?: string | undefined;
        status: {};
        priority: {};
        subject: {};
        assignedTo: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        relatedTo?: string | undefined;
        status: _rollouthq_common.RichEditorContent;
        priority: _rollouthq_common.RichEditorContent;
        subject: _rollouthq_common.RichEditorContent;
        assignedTo: string;
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateAccount: {
    name: "Update an account";
    inputParamsSchema: zod.ZodObject<zod.extendShape<{
        accountName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        website: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        accountNumber: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        billingStreet: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        billingCity: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        billingState: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        billingPostalCode: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        billingCountry: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        shippingStreet: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        shippingCity: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        shippingState: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        shippingPostalCode: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        shippingCountry: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        type: zod.ZodOptional<zod.ZodOptional<zod.ZodString>>;
        industry: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        parentAccount: zod.ZodOptional<zod.ZodOptional<zod.ZodString>>;
        description: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, {
        account: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }>, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        type?: string | undefined;
        account?: string | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        accountName?: _rollouthq_common.RichEditorContent | undefined;
        website?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        billingStreet?: _rollouthq_common.RichEditorContent | undefined;
        billingCity?: _rollouthq_common.RichEditorContent | undefined;
        billingState?: _rollouthq_common.RichEditorContent | undefined;
        billingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        billingCountry?: _rollouthq_common.RichEditorContent | undefined;
        shippingStreet?: _rollouthq_common.RichEditorContent | undefined;
        shippingCity?: _rollouthq_common.RichEditorContent | undefined;
        shippingState?: _rollouthq_common.RichEditorContent | undefined;
        shippingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        shippingCountry?: _rollouthq_common.RichEditorContent | undefined;
        industry?: _rollouthq_common.RichEditorContent | undefined;
        parentAccount?: string | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        type?: string | undefined;
        account?: string | undefined;
        description?: {} | undefined;
        phone?: {} | undefined;
        filterValue?: {} | undefined;
        accountName?: {} | undefined;
        website?: {} | undefined;
        accountNumber?: {} | undefined;
        billingStreet?: {} | undefined;
        billingCity?: {} | undefined;
        billingState?: {} | undefined;
        billingPostalCode?: {} | undefined;
        billingCountry?: {} | undefined;
        shippingStreet?: {} | undefined;
        shippingCity?: {} | undefined;
        shippingState?: {} | undefined;
        shippingPostalCode?: {} | undefined;
        shippingCountry?: {} | undefined;
        industry?: {} | undefined;
        parentAccount?: string | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        type?: string | undefined;
        account?: string | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        accountName?: _rollouthq_common.RichEditorContent | undefined;
        website?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        billingStreet?: _rollouthq_common.RichEditorContent | undefined;
        billingCity?: _rollouthq_common.RichEditorContent | undefined;
        billingState?: _rollouthq_common.RichEditorContent | undefined;
        billingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        billingCountry?: _rollouthq_common.RichEditorContent | undefined;
        shippingStreet?: _rollouthq_common.RichEditorContent | undefined;
        shippingCity?: _rollouthq_common.RichEditorContent | undefined;
        shippingState?: _rollouthq_common.RichEditorContent | undefined;
        shippingPostalCode?: _rollouthq_common.RichEditorContent | undefined;
        shippingCountry?: _rollouthq_common.RichEditorContent | undefined;
        industry?: _rollouthq_common.RichEditorContent | undefined;
        parentAccount?: string | undefined;
        findMethod: "filter" | "select";
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateContact: {
    name: "Update contact";
    inputParamsSchema: zod.ZodObject<zod.extendShape<{
        fields: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>>;
    }, {
        contact: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }>, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        contact?: string | undefined;
        fields?: Record<string, _rollouthq_common.RichEditorContent | undefined> | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        contact?: string | undefined;
        fields?: Record<string, {} | undefined> | undefined;
        filterValue?: {} | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        contact?: string | undefined;
        fields?: Record<string, _rollouthq_common.RichEditorContent | undefined> | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateLead: {
    name: "Update lead";
    inputParamsSchema: zod.ZodObject<zod.extendShape<{
        lastName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        firstName: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        company: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        email: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        street: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        city: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        state: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        postalCode: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        country: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, {
        lead: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }>, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        company?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        lead?: string | undefined;
        street?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        email?: {} | undefined;
        state?: {} | undefined;
        firstName?: {} | undefined;
        lastName?: {} | undefined;
        company?: {} | undefined;
        phone?: {} | undefined;
        city?: {} | undefined;
        country?: {} | undefined;
        filterValue?: {} | undefined;
        postalCode?: {} | undefined;
        lead?: string | undefined;
        street?: {} | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        email?: _rollouthq_common.RichEditorContent | undefined;
        state?: _rollouthq_common.RichEditorContent | undefined;
        firstName?: _rollouthq_common.RichEditorContent | undefined;
        lastName?: _rollouthq_common.RichEditorContent | undefined;
        company?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        city?: _rollouthq_common.RichEditorContent | undefined;
        country?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        postalCode?: _rollouthq_common.RichEditorContent | undefined;
        lead?: string | undefined;
        street?: _rollouthq_common.RichEditorContent | undefined;
        findMethod: "filter" | "select";
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateOpportunity: {
    name: "Update opportunity";
    inputParamsSchema: zod.ZodObject<zod.extendShape<{
        name: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        stage: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        closeDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        primaryCampaign: zod.ZodOptional<zod.ZodString>;
    }, {
        opportunity: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }>, "strip", zod.ZodTypeAny, {
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        stage?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        opportunity?: string | undefined;
        primaryCampaign?: string | undefined;
        findMethod: "filter" | "select";
    }, {
        filter?: string | undefined;
        name?: {} | undefined;
        stage?: {} | undefined;
        closeDate?: {} | undefined;
        filterValue?: {} | undefined;
        opportunity?: string | undefined;
        primaryCampaign?: string | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        filter?: string | undefined;
        name?: _rollouthq_common.RichEditorContent | undefined;
        stage?: _rollouthq_common.RichEditorContent | undefined;
        closeDate?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        opportunity?: string | undefined;
        primaryCampaign?: string | undefined;
        findMethod: "filter" | "select";
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const updateTask: {
    name: "Update task";
    inputParamsSchema: zod.ZodObject<zod.extendShape<{
        assignedTo: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        subject: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        priority: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        relatedTo: zod.ZodOptional<zod.ZodOptional<zod.ZodString>>;
        dueDate: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
        name: zod.ZodOptional<zod.ZodOptional<zod.ZodString>>;
        description: zod.ZodOptional<zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>>;
    }, {
        task: zod.ZodOptional<zod.ZodString>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }>, "strip", zod.ZodTypeAny, {
        status?: _rollouthq_common.RichEditorContent | undefined;
        filter?: string | undefined;
        name?: string | undefined;
        priority?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        task?: string | undefined;
        subject?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        assignedTo?: string | undefined;
        relatedTo?: string | undefined;
        findMethod: "filter" | "select";
    }, {
        status?: {} | undefined;
        filter?: string | undefined;
        name?: string | undefined;
        priority?: {} | undefined;
        dueDate?: {} | undefined;
        description?: {} | undefined;
        task?: string | undefined;
        subject?: {} | undefined;
        filterValue?: {} | undefined;
        assignedTo?: string | undefined;
        relatedTo?: string | undefined;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: _rollouthq_common.RichEditorContent | undefined;
        filter?: string | undefined;
        name?: string | undefined;
        priority?: _rollouthq_common.RichEditorContent | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        task?: string | undefined;
        subject?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        assignedTo?: string | undefined;
        relatedTo?: string | undefined;
        findMethod: "filter" | "select";
    }, SalesforceCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$7_addNewAccount: typeof addNewAccount;
declare const actions$7_addNewContactToCampaign: typeof addNewContactToCampaign;
declare const actions$7_addNewContact: typeof addNewContact;
declare const actions$7_addNewLead: typeof addNewLead;
declare const actions$7_addNewOpportunity: typeof addNewOpportunity;
declare const actions$7_addNewTask: typeof addNewTask;
declare const actions$7_updateAccount: typeof updateAccount;
declare const actions$7_updateContact: typeof updateContact;
declare const actions$7_updateLead: typeof updateLead;
declare const actions$7_updateOpportunity: typeof updateOpportunity;
declare const actions$7_updateTask: typeof updateTask;
declare namespace actions$7 {
  export {
    actions$7_addNewAccount as addNewAccount,
    actions$7_addNewContactToCampaign as addNewContactToCampaign,
    actions$7_addNewContact as addNewContact,
    actions$7_addNewLead as addNewLead,
    actions$7_addNewOpportunity as addNewOpportunity,
    actions$7_addNewTask as addNewTask,
    actions$7_updateAccount as updateAccount,
    actions$7_updateContact as updateContact,
    actions$7_updateLead as updateLead,
    actions$7_updateOpportunity as updateOpportunity,
    actions$7_updateTask as updateTask,
  };
}

declare const accountAdded: {
    name: "New Account";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "Name";
        readonly label: "Account Name";
        readonly type: "string";
    }, {
        readonly key: "OwnerId";
        readonly label: "Owner Id";
        readonly type: "string";
    }, {
        readonly key: "url";
        readonly label: "URL";
        readonly type: "string";
    }, {
        readonly key: "Description";
        readonly label: "Description";
        readonly type: "string";
    }, {
        readonly key: "Website";
        readonly label: "Website";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId, trigger }: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const campaignAdded: {
    name: "New Campaign";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const caseAdded: {
    name: "New Case";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const contactAdded: {
    name: "New Contact";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "LastName";
        readonly label: "LastName";
        readonly type: "string";
    }, {
        readonly key: "OwnerId";
        readonly label: "Owner Id";
        readonly type: "string";
    }, {
        readonly key: "url";
        readonly label: "URL";
        readonly type: "string";
    }, {
        readonly key: "AccountId";
        readonly label: "Account Id";
        readonly type: "string";
    }, {
        readonly key: "OwnerId";
        readonly label: "Owner Id";
        readonly type: "string";
    }, {
        readonly key: "LastModifiedDate";
        readonly label: "Last Modified Date";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const eventAdded: {
    name: "New Event";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const leadAdded: {
    name: "New Lead";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "LastName";
        readonly label: "Last Name";
        readonly type: "string";
    }, {
        readonly key: "FirstName";
        readonly label: "First Name";
        readonly type: "string";
    }, {
        readonly key: "OwnerId";
        readonly label: "Owner Id";
        readonly type: "string";
    }, {
        readonly key: "url";
        readonly label: "URL";
        readonly type: "string";
    }, {
        readonly key: "AccountId";
        readonly label: "Account Id";
        readonly type: "string";
    }, {
        readonly key: "LastModifiedDate";
        readonly label: "Last Modified Date";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const noteAdded: {
    name: "New Note";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const opportunityAdded: {
    name: "New Opportunity";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "StageName";
        readonly label: "Stage Name";
        readonly type: "string";
    }, {
        readonly key: "Name";
        readonly label: "Name";
        readonly type: "string";
    }, {
        readonly key: "ForecastCategory";
        readonly label: "Forecast Category";
        readonly type: "string";
    }, {
        readonly key: "url";
        readonly label: "URL";
        readonly type: "string";
    }, {
        readonly key: "ForecastCategoryName";
        readonly label: "Forecast Category Name";
        readonly type: "string";
    }, {
        readonly key: "LastModifiedDate";
        readonly label: "Last Modified Date";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const taskAdded: {
    name: "New Task";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "name";
        readonly label: "Task Name";
        readonly type: "string";
    }];
    setup({ credential, inputParams, automation, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: SalesforceCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete(opts: {
        credential: SalesforceCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const triggers$1_accountAdded: typeof accountAdded;
declare const triggers$1_campaignAdded: typeof campaignAdded;
declare const triggers$1_caseAdded: typeof caseAdded;
declare const triggers$1_contactAdded: typeof contactAdded;
declare const triggers$1_eventAdded: typeof eventAdded;
declare const triggers$1_leadAdded: typeof leadAdded;
declare const triggers$1_noteAdded: typeof noteAdded;
declare const triggers$1_opportunityAdded: typeof opportunityAdded;
declare const triggers$1_taskAdded: typeof taskAdded;
declare namespace triggers$1 {
  export {
    triggers$1_accountAdded as accountAdded,
    triggers$1_campaignAdded as campaignAdded,
    triggers$1_caseAdded as caseAdded,
    triggers$1_contactAdded as contactAdded,
    triggers$1_eventAdded as eventAdded,
    triggers$1_leadAdded as leadAdded,
    triggers$1_noteAdded as noteAdded,
    triggers$1_opportunityAdded as opportunityAdded,
    triggers$1_taskAdded as taskAdded,
  };
}

declare const salesforce: {
    name: "Salesforce";
    auth: AnyAuthDefinition<SalesforceCredential, {
        SALESFORCE_CLIENT_ID: string;
        SALESFORCE_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        SALESFORCE_CLIENT_ID: zod.ZodString;
        SALESFORCE_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        SALESFORCE_CLIENT_ID: string;
        SALESFORCE_CLIENT_SECRET: string;
    }, {
        SALESFORCE_CLIENT_ID: string;
        SALESFORCE_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$7;
    triggers: typeof triggers$1;
};

declare type ShopifyCredential = AppCredential<"oauth2WithoutRefresh", {
    subdomain: string;
}>;

declare const createCustomer: {
    name: "Create customer";
    inputParamsSchema: zod.ZodObject<{
        firstName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        lastName: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        email: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        phone?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
    }, {
        phone?: {} | undefined;
        email: {};
        firstName: {};
        lastName: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        phone?: _rollouthq_common.RichEditorContent | undefined;
        email: _rollouthq_common.RichEditorContent;
        firstName: _rollouthq_common.RichEditorContent;
        lastName: _rollouthq_common.RichEditorContent;
    }, ShopifyCredential, AppEnv>;
    type: "thirdParty";
};

declare const createOrder: {
    name: "Create order";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        title: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        quantity: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        price: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        customerId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        title: _rollouthq_common.RichEditorContent;
        customerId: string;
        quantity: _rollouthq_common.RichEditorContent;
        price: _rollouthq_common.RichEditorContent;
    }, {
        name: {};
        title: {};
        customerId: string;
        quantity: {};
        price: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        title: _rollouthq_common.RichEditorContent;
        customerId: string;
        quantity: _rollouthq_common.RichEditorContent;
        price: _rollouthq_common.RichEditorContent;
    }, ShopifyCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$6_createCustomer: typeof createCustomer;
declare const actions$6_createOrder: typeof createOrder;
declare namespace actions$6 {
  export {
    actions$6_createCustomer as createCustomer,
    actions$6_createOrder as createOrder,
  };
}

declare const newCustomer: {
    name: "New Customer";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "first_name";
        readonly label: "First Name";
        readonly type: "string";
    }, {
        readonly key: "id";
        readonly label: "Id";
        readonly type: "string";
    }, {
        readonly key: "last_name";
        readonly label: "Last Name";
        readonly type: "string";
    }, {
        readonly key: "email";
        readonly label: "Email";
        readonly type: "string";
    }, {
        readonly key: "phone";
        readonly label: "Phone";
        readonly type: "string";
    }];
    setup({ credential, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: ShopifyCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId }: {
        credential: ShopifyCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const newOrder: {
    name: "New Order";
    inputParamsSchema: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
    payloadSchema: readonly [{
        readonly key: "id";
        readonly label: "Line Item Ids";
        readonly type: "string";
    }, {
        readonly key: "customer_id";
        readonly label: "CustomerId";
        readonly type: "string";
    }, {
        readonly key: "name";
        readonly label: "Line Item Names";
        readonly type: "string";
    }, {
        readonly key: "title";
        readonly label: "Line Item Titles";
        readonly type: "string";
    }, {
        readonly key: "quantity";
        readonly label: "Line Item Quantities";
        readonly type: "string";
    }, {
        readonly key: "price";
        readonly label: "Line Item Prices";
        readonly type: "string";
    }];
    setup({ credential, targetUrl }: {
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        credential: ShopifyCredential;
        inputParams: any;
        targetUrl: string;
    }): Promise<TriggerSetupResult>;
    delete({ credential, webhookId }: {
        credential: ShopifyCredential;
        webhookId: string;
        trigger: {
            webhookId?: string | undefined;
            extraInfo?: any;
            ref: {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                triggerKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
            };
        };
    }): Promise<TriggerDeletionResult>;
    start({ gatewayEvent, automation }: {
        gatewayEvent: aws_lambda.APIGatewayProxyEvent;
        automation: {
            id: string;
            name: string;
            endUserId: string;
            deleted: boolean;
            active: boolean;
            action: {
                appKey: string;
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            } | {
                appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                credentialId: string;
                inputParams: Record<string, any>;
                actionKey: string;
            };
            trigger: {
                ref: {
                    appKey: string;
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            } | {
                webhookId?: string | undefined;
                extraInfo?: any;
                ref: {
                    appKey: "activeCampaign" | "asana" | "clickup" | "close" | "discord" | "dropbox" | "freshsales" | "freshservice" | "gmail" | "googleCalendar" | "googleDocs" | "googleSheets" | "hubspot" | "intercom" | "jiraSoftwareCloud" | "klaviyo" | "mailchimp" | "microsoftExcel" | "monday" | "msTeams" | "outlookMail" | "pipedrive" | "quickbooksOnline" | "salesforce" | "shopify" | "slack" | "trello" | "twilio" | "xero" | "zendesk" | "zoom";
                    triggerKey: string;
                    credentialId: string;
                    inputParams: Record<string, any>;
                };
            };
            customData: Record<string, any> | null;
            subscribeData: Record<string, any> | null;
        };
        startAutomationRun: typeof startAutomationRun;
    }): Promise<void>;
};

declare const triggers_newCustomer: typeof newCustomer;
declare const triggers_newOrder: typeof newOrder;
declare namespace triggers {
  export {
    triggers_newCustomer as newCustomer,
    triggers_newOrder as newOrder,
  };
}

declare const shopify: {
    name: "Shopify";
    auth: AnyAuthDefinition<ShopifyCredential, {
        SHOPIFY_CLIENT_ID: string;
        SHOPIFY_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        SHOPIFY_CLIENT_ID: zod.ZodString;
        SHOPIFY_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        SHOPIFY_CLIENT_ID: string;
        SHOPIFY_CLIENT_SECRET: string;
    }, {
        SHOPIFY_CLIENT_ID: string;
        SHOPIFY_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$6;
    triggers: typeof triggers;
};

declare type SlackCredential = AppCredential<"oauth2", {
    teamId: string;
    botToken: string;
    slackUserId: string;
}>;

declare const addChannel: {
    name: "Add a channel";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
    }, {
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const archiveChannel: {
    name: "Archive a channel";
    inputParamsSchema: zod.ZodObject<{
        channelId: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        channelId: string;
    }, {
        channelId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        channelId: string;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const sendChannelMessage: {
    name: "Send a channel message";
    inputParamsSchema: zod.ZodObject<{
        channelId: zod.ZodString;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        channelId: string;
    }, {
        message: {};
        channelId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        channelId: string;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const sendDirectMessage: {
    name: "Send a direct message";
    inputParamsSchema: zod.ZodObject<{
        channelId: zod.ZodString;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        channelId: string;
    }, {
        message: {};
        channelId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        channelId: string;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const setChannelTopic: {
    name: "Set a channel topic";
    inputParamsSchema: zod.ZodObject<{
        channelId: zod.ZodString;
        topic: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        channelId: string;
        topic: _rollouthq_common.RichEditorContent;
    }, {
        channelId: string;
        topic: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        channelId: string;
        topic: _rollouthq_common.RichEditorContent;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const setStatus: {
    name: "Set a status";
    inputParamsSchema: zod.ZodObject<{
        status: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        emoji: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        expiresIn: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: _rollouthq_common.RichEditorContent | undefined;
        expiresIn?: _rollouthq_common.RichEditorContent | undefined;
        emoji?: _rollouthq_common.RichEditorContent | undefined;
    }, {
        status?: {} | undefined;
        expiresIn?: {} | undefined;
        emoji?: {} | undefined;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: _rollouthq_common.RichEditorContent | undefined;
        expiresIn?: _rollouthq_common.RichEditorContent | undefined;
        emoji?: _rollouthq_common.RichEditorContent | undefined;
    }, SlackCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$5_addChannel: typeof addChannel;
declare const actions$5_archiveChannel: typeof archiveChannel;
declare const actions$5_sendChannelMessage: typeof sendChannelMessage;
declare const actions$5_sendDirectMessage: typeof sendDirectMessage;
declare const actions$5_setChannelTopic: typeof setChannelTopic;
declare const actions$5_setStatus: typeof setStatus;
declare namespace actions$5 {
  export {
    actions$5_addChannel as addChannel,
    actions$5_archiveChannel as archiveChannel,
    actions$5_sendChannelMessage as sendChannelMessage,
    actions$5_sendDirectMessage as sendDirectMessage,
    actions$5_setChannelTopic as setChannelTopic,
    actions$5_setStatus as setStatus,
  };
}

declare const slack: {
    name: "Slack";
    auth: AnyAuthDefinition<SlackCredential, {
        SLACK_CLIENT_ID: string;
        SLACK_CLIENT_SECRET: string;
        SLACK_SIGNING_SECRET: string;
    }>;
    env: zod.ZodObject<{
        SLACK_CLIENT_ID: zod.ZodString;
        SLACK_CLIENT_SECRET: zod.ZodString;
        SLACK_SIGNING_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        SLACK_CLIENT_ID: string;
        SLACK_CLIENT_SECRET: string;
        SLACK_SIGNING_SECRET: string;
    }, {
        SLACK_CLIENT_ID: string;
        SLACK_CLIENT_SECRET: string;
        SLACK_SIGNING_SECRET: string;
    }>;
    actions: typeof actions$5;
};

declare type TrelloCredential = AppCredential<"oauth1">;

declare const createBoard: {
    name: "Create a board";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        description: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        allowAnyTeamMemberToJoin: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        description: _rollouthq_common.RichEditorContent;
        allowAnyTeamMemberToJoin: string;
    }, {
        name: {};
        description: {};
        allowAnyTeamMemberToJoin: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        description: _rollouthq_common.RichEditorContent;
        allowAnyTeamMemberToJoin: string;
    }, TrelloCredential, {
        TRELLO_KEY: string;
        TRELLO_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const createCard: {
    name: "Create a card";
    inputParamsSchema: zod.ZodObject<{
        list: zod.ZodString;
        board: zod.ZodString;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        position: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        dueDate: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        description: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        name: _rollouthq_common.RichEditorContent;
        list: string;
        dueDate: _rollouthq_common.RichEditorContent;
        description: _rollouthq_common.RichEditorContent;
        board: string;
        position: _rollouthq_common.RichEditorContent;
    }, {
        name: {};
        list: string;
        dueDate: {};
        description: {};
        board: string;
        position: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        name: _rollouthq_common.RichEditorContent;
        list: string;
        dueDate: _rollouthq_common.RichEditorContent;
        description: _rollouthq_common.RichEditorContent;
        board: string;
        position: _rollouthq_common.RichEditorContent;
    }, TrelloCredential, {
        TRELLO_KEY: string;
        TRELLO_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$4_createBoard: typeof createBoard;
declare const actions$4_createCard: typeof createCard;
declare namespace actions$4 {
  export {
    actions$4_createBoard as createBoard,
    actions$4_createCard as createCard,
  };
}

declare const trello: {
    name: "Trello";
    auth: AnyAuthDefinition<TrelloCredential, {
        TRELLO_KEY: string;
        TRELLO_SECRET: string;
    }>;
    env: zod.ZodObject<{
        TRELLO_KEY: zod.ZodString;
        TRELLO_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        TRELLO_KEY: string;
        TRELLO_SECRET: string;
    }, {
        TRELLO_KEY: string;
        TRELLO_SECRET: string;
    }>;
    actions: typeof actions$4;
};

declare type TwilioCredential = AppCredential<"apiToken", {
    accountSID: string;
    authToken: string;
}>;

declare const sendSms: {
    name: "Send sms";
    inputParamsSchema: zod.ZodObject<{
        from: zod.ZodString;
        to: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        message: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        message: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
        from: string;
    }, {
        message: {};
        to: {};
        from: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        message: _rollouthq_common.RichEditorContent;
        to: _rollouthq_common.RichEditorContent;
        from: string;
    }, TwilioCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$3_sendSms: typeof sendSms;
declare namespace actions$3 {
  export {
    actions$3_sendSms as sendSms,
  };
}

declare const twilio: {
    name: "Twilio";
    auth: AnyAuthDefinition<TwilioCredential, {}>;
    actions: typeof actions$3;
};

declare type XeroCredential = AppCredential<"oauth2">;

declare const createContact: {
    name: "Create contact";
    inputParamsSchema: zod.ZodObject<{
        organizationId: zod.ZodString;
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        accountNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        organizationId: string;
    }, {
        email?: {} | undefined;
        phone?: {} | undefined;
        accountNumber?: {} | undefined;
        name: {};
        organizationId: string;
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        accountNumber?: _rollouthq_common.RichEditorContent | undefined;
        name: _rollouthq_common.RichEditorContent;
        organizationId: string;
    }, XeroCredential, {
        XERO_CLIENT_ID: string;
        XERO_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const createInvoice: {
    name: "Create invoice";
    inputParamsSchema: zod.ZodObject<{
        contactId: zod.ZodOptional<zod.ZodString>;
        type: zod.ZodString;
        date: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        dueDate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        findMethod: zod.ZodUnion<[zod.ZodLiteral<"filter">, zod.ZodLiteral<"select">]>;
        filter: zod.ZodOptional<zod.ZodString>;
        filterValue: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lineAmountTypes: zod.ZodOptional<zod.ZodString>;
        invoiceNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        referenceNumber: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        currencyCode: zod.ZodOptional<zod.ZodString>;
        currencyRate: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        status: zod.ZodOptional<zod.ZodString>;
        description: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        quantity: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        unitAmount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        itemCode: zod.ZodOptional<zod.ZodString>;
        account: zod.ZodOptional<zod.ZodString>;
        taxAmount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        lineAmount: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        filter?: string | undefined;
        date?: _rollouthq_common.RichEditorContent | undefined;
        account?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        quantity?: _rollouthq_common.RichEditorContent | undefined;
        contactId?: string | undefined;
        lineAmountTypes?: string | undefined;
        invoiceNumber?: _rollouthq_common.RichEditorContent | undefined;
        referenceNumber?: _rollouthq_common.RichEditorContent | undefined;
        currencyCode?: string | undefined;
        currencyRate?: _rollouthq_common.RichEditorContent | undefined;
        unitAmount?: _rollouthq_common.RichEditorContent | undefined;
        itemCode?: string | undefined;
        taxAmount?: _rollouthq_common.RichEditorContent | undefined;
        lineAmount?: _rollouthq_common.RichEditorContent | undefined;
        type: string;
        findMethod: "filter" | "select";
    }, {
        status?: string | undefined;
        filter?: string | undefined;
        date?: {} | undefined;
        account?: string | undefined;
        dueDate?: {} | undefined;
        description?: {} | undefined;
        filterValue?: {} | undefined;
        quantity?: {} | undefined;
        contactId?: string | undefined;
        lineAmountTypes?: string | undefined;
        invoiceNumber?: {} | undefined;
        referenceNumber?: {} | undefined;
        currencyCode?: string | undefined;
        currencyRate?: {} | undefined;
        unitAmount?: {} | undefined;
        itemCode?: string | undefined;
        taxAmount?: {} | undefined;
        lineAmount?: {} | undefined;
        type: string;
        findMethod: "filter" | "select";
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        filter?: string | undefined;
        date?: _rollouthq_common.RichEditorContent | undefined;
        account?: string | undefined;
        dueDate?: _rollouthq_common.RichEditorContent | undefined;
        description?: _rollouthq_common.RichEditorContent | undefined;
        filterValue?: _rollouthq_common.RichEditorContent | undefined;
        quantity?: _rollouthq_common.RichEditorContent | undefined;
        contactId?: string | undefined;
        lineAmountTypes?: string | undefined;
        invoiceNumber?: _rollouthq_common.RichEditorContent | undefined;
        referenceNumber?: _rollouthq_common.RichEditorContent | undefined;
        currencyCode?: string | undefined;
        currencyRate?: _rollouthq_common.RichEditorContent | undefined;
        unitAmount?: _rollouthq_common.RichEditorContent | undefined;
        itemCode?: string | undefined;
        taxAmount?: _rollouthq_common.RichEditorContent | undefined;
        lineAmount?: _rollouthq_common.RichEditorContent | undefined;
        type: string;
        findMethod: "filter" | "select";
    }, XeroCredential, {
        XERO_CLIENT_ID: string;
        XERO_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions$2_createContact: typeof createContact;
declare const actions$2_createInvoice: typeof createInvoice;
declare namespace actions$2 {
  export {
    actions$2_createContact as createContact,
    actions$2_createInvoice as createInvoice,
  };
}

declare const xero: {
    name: "Xero";
    auth: AnyAuthDefinition<XeroCredential, {
        XERO_CLIENT_ID: string;
        XERO_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        XERO_CLIENT_ID: zod.ZodString;
        XERO_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        XERO_CLIENT_ID: string;
        XERO_CLIENT_SECRET: string;
    }, {
        XERO_CLIENT_ID: string;
        XERO_CLIENT_SECRET: string;
    }>;
    actions: typeof actions$2;
};

declare type ZendeskCredential = AppCredential<"apiToken", {
    subdomain: string;
    agentEmail: string;
    apiToken: string;
}>;

declare const createTicket: {
    name: "Create a ticket";
    inputParamsSchema: zod.ZodObject<{
        subject: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        assignee: zod.ZodOptional<zod.ZodString>;
        collaborators: zod.ZodOptional<zod.ZodString>;
        status: zod.ZodOptional<zod.ZodString>;
        priority: zod.ZodOptional<zod.ZodString>;
        description: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        type: zod.ZodOptional<zod.ZodString>;
        dueAt: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
    }, "strip", zod.ZodTypeAny, {
        status?: string | undefined;
        type?: string | undefined;
        priority?: string | undefined;
        assignee?: string | undefined;
        subject?: _rollouthq_common.RichEditorContent | undefined;
        collaborators?: string | undefined;
        dueAt?: _rollouthq_common.RichEditorContent | undefined;
        description: _rollouthq_common.RichEditorContent;
    }, {
        status?: string | undefined;
        type?: string | undefined;
        priority?: string | undefined;
        assignee?: string | undefined;
        subject?: {} | undefined;
        collaborators?: string | undefined;
        dueAt?: {} | undefined;
        description: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        status?: string | undefined;
        type?: string | undefined;
        priority?: string | undefined;
        assignee?: string | undefined;
        subject?: _rollouthq_common.RichEditorContent | undefined;
        collaborators?: string | undefined;
        dueAt?: _rollouthq_common.RichEditorContent | undefined;
        description: _rollouthq_common.RichEditorContent;
    }, ZendeskCredential, AppEnv>;
    type: "thirdParty";
};

declare const createUser: {
    name: "Create or update an user";
    inputParamsSchema: zod.ZodObject<{
        name: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        email: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        details: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        notes: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        phone: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        role: zod.ZodOptional<zod.ZodString>;
        externalId: zod.ZodOptional<zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>>;
        organizationId: zod.ZodOptional<zod.ZodString>;
        verified: zod.ZodOptional<zod.ZodBoolean>;
    }, "strip", zod.ZodTypeAny, {
        email?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        role?: string | undefined;
        organizationId?: string | undefined;
        details?: _rollouthq_common.RichEditorContent | undefined;
        externalId?: _rollouthq_common.RichEditorContent | undefined;
        verified?: boolean | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, {
        email?: {} | undefined;
        notes?: {} | undefined;
        phone?: {} | undefined;
        role?: string | undefined;
        organizationId?: string | undefined;
        details?: {} | undefined;
        externalId?: {} | undefined;
        verified?: boolean | undefined;
        name: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        email?: _rollouthq_common.RichEditorContent | undefined;
        notes?: _rollouthq_common.RichEditorContent | undefined;
        phone?: _rollouthq_common.RichEditorContent | undefined;
        role?: string | undefined;
        organizationId?: string | undefined;
        details?: _rollouthq_common.RichEditorContent | undefined;
        externalId?: _rollouthq_common.RichEditorContent | undefined;
        verified?: boolean | undefined;
        name: _rollouthq_common.RichEditorContent;
    }, ZendeskCredential, AppEnv>;
    type: "thirdParty";
};

declare const actions$1_createTicket: typeof createTicket;
declare const actions$1_createUser: typeof createUser;
declare namespace actions$1 {
  export {
    actions$1_createTicket as createTicket,
    actions$1_createUser as createUser,
  };
}

declare const zendesk: {
    name: "Zendesk";
    auth: AnyAuthDefinition<ZendeskCredential, {}>;
    actions: typeof actions$1;
};

declare type ZoomCredential = AppCredential<"oauth2">;

declare const createMeeting: {
    name: "Create a meeting";
    inputParamsSchema: zod.ZodObject<{
        topic: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        dateTime: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        duration: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
        timezone: zod.ZodString;
        passcode: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, {}, {}>, {}, {}>, _rollouthq_common.RichEditorContent, {}>;
    }, "strip", zod.ZodTypeAny, {
        timezone: string;
        duration: _rollouthq_common.RichEditorContent;
        topic: _rollouthq_common.RichEditorContent;
        dateTime: _rollouthq_common.RichEditorContent;
        passcode: _rollouthq_common.RichEditorContent;
    }, {
        timezone: string;
        duration: {};
        topic: {};
        dateTime: {};
        passcode: {};
    }>;
    execute: ExecuteThirdPartyActionFunction<{
        timezone: string;
        duration: _rollouthq_common.RichEditorContent;
        topic: _rollouthq_common.RichEditorContent;
        dateTime: _rollouthq_common.RichEditorContent;
        passcode: _rollouthq_common.RichEditorContent;
    }, ZoomCredential, {
        ZOOM_CLIENT_ID: string;
        ZOOM_CLIENT_SECRET: string;
    }>;
    type: "thirdParty";
};

declare const actions_createMeeting: typeof createMeeting;
declare namespace actions {
  export {
    actions_createMeeting as createMeeting,
  };
}

declare const zoom: {
    name: "Zoom";
    auth: AnyAuthDefinition<ZoomCredential, {
        ZOOM_CLIENT_ID: string;
        ZOOM_CLIENT_SECRET: string;
    }>;
    env: zod.ZodObject<{
        ZOOM_CLIENT_ID: zod.ZodString;
        ZOOM_CLIENT_SECRET: zod.ZodString;
    }, "strip", zod.ZodTypeAny, {
        ZOOM_CLIENT_ID: string;
        ZOOM_CLIENT_SECRET: string;
    }, {
        ZOOM_CLIENT_ID: string;
        ZOOM_CLIENT_SECRET: string;
    }>;
    actions: typeof actions;
};

declare const apps_activeCampaign: typeof activeCampaign;
declare const apps_asana: typeof asana;
declare const apps_clickup: typeof clickup;
declare const apps_close: typeof close;
declare const apps_discord: typeof discord;
declare const apps_dropbox: typeof dropbox;
declare const apps_freshsales: typeof freshsales;
declare const apps_freshservice: typeof freshservice;
declare const apps_gmail: typeof gmail;
declare const apps_googleCalendar: typeof googleCalendar;
declare const apps_googleDocs: typeof googleDocs;
declare const apps_googleSheets: typeof googleSheets;
declare const apps_hubspot: typeof hubspot;
declare const apps_intercom: typeof intercom;
declare const apps_jiraSoftwareCloud: typeof jiraSoftwareCloud;
declare const apps_klaviyo: typeof klaviyo;
declare const apps_mailchimp: typeof mailchimp;
declare const apps_microsoftExcel: typeof microsoftExcel;
declare const apps_monday: typeof monday;
declare const apps_msTeams: typeof msTeams;
declare const apps_outlookMail: typeof outlookMail;
declare const apps_pipedrive: typeof pipedrive;
declare const apps_quickbooksOnline: typeof quickbooksOnline;
declare const apps_salesforce: typeof salesforce;
declare const apps_shopify: typeof shopify;
declare const apps_slack: typeof slack;
declare const apps_trello: typeof trello;
declare const apps_twilio: typeof twilio;
declare const apps_xero: typeof xero;
declare const apps_zendesk: typeof zendesk;
declare const apps_zoom: typeof zoom;
declare namespace apps {
  export {
    apps_activeCampaign as activeCampaign,
    apps_asana as asana,
    apps_clickup as clickup,
    apps_close as close,
    apps_discord as discord,
    apps_dropbox as dropbox,
    apps_freshsales as freshsales,
    apps_freshservice as freshservice,
    apps_gmail as gmail,
    apps_googleCalendar as googleCalendar,
    apps_googleDocs as googleDocs,
    apps_googleSheets as googleSheets,
    apps_hubspot as hubspot,
    apps_intercom as intercom,
    apps_jiraSoftwareCloud as jiraSoftwareCloud,
    apps_klaviyo as klaviyo,
    apps_mailchimp as mailchimp,
    apps_microsoftExcel as microsoftExcel,
    apps_monday as monday,
    apps_msTeams as msTeams,
    apps_outlookMail as outlookMail,
    apps_pipedrive as pipedrive,
    apps_quickbooksOnline as quickbooksOnline,
    apps_salesforce as salesforce,
    apps_shopify as shopify,
    apps_slack as slack,
    apps_trello as trello,
    apps_twilio as twilio,
    apps_xero as xero,
    apps_zendesk as zendesk,
    apps_zoom as zoom,
  };
}

declare type ThirdPartyApps = typeof apps;
declare type ThirdPartyAppKey = keyof ThirdPartyApps;

declare type AnyAppSlug = ThirdPartyAppKey | "customer";

declare type RolloutConnectProviderProps = {
    token: string | (() => Promise<string> | string);
    onError?: (error: Error, info: {
        componentStack: string;
    }) => void;
    apiBaseUrl?: string | undefined;
    allowedApps?: AnyAppSlug[];
    children: ReactElement;
    env?: string;
};
declare function RolloutConnectProvider(props: RolloutConnectProviderProps): JSX.Element;

type index_PrefilledData = PrefilledData;
type index_AutomationCreatorProps = AutomationCreatorProps;
declare const index_AutomationCreator: typeof AutomationCreator;
declare const index_AutomationEditor: typeof AutomationEditor;
type index_AutomationsManagerProps = AutomationsManagerProps;
declare const index_AutomationsManager: typeof AutomationsManager;
type index_BlueprintActivatorProps = BlueprintActivatorProps;
declare const index_BlueprintActivator: typeof BlueprintActivator;
type index_BlueprintsListProps = BlueprintsListProps;
declare const index_BlueprintsList: typeof BlueprintsList;
type index_BlueprintsManagerView = BlueprintsManagerView;
declare const index_BlueprintsManager: typeof BlueprintsManager;
type index_AutomationFilterData = AutomationFilterData;
type index_MyAutomationsProps = MyAutomationsProps;
declare const index_MyAutomations: typeof MyAutomations;
type index_MyBlueprintsProps = MyBlueprintsProps;
declare const index_MyBlueprints: typeof MyBlueprints;
declare const index_TaskInitiator: typeof TaskInitiator;
declare const index_PoweredByRollout: typeof PoweredByRollout;
type index_RolloutConnectProviderProps = RolloutConnectProviderProps;
declare const index_RolloutConnectProvider: typeof RolloutConnectProvider;
declare namespace index {
  export {
    index_PrefilledData as PrefilledData,
    index_AutomationCreatorProps as AutomationCreatorProps,
    index_AutomationCreator as AutomationCreator,
    index_AutomationEditor as AutomationEditor,
    index_AutomationsManagerProps as AutomationsManagerProps,
    index_AutomationsManager as AutomationsManager,
    index_BlueprintActivatorProps as BlueprintActivatorProps,
    index_BlueprintActivator as BlueprintActivator,
    index_BlueprintsListProps as BlueprintsListProps,
    index_BlueprintsList as BlueprintsList,
    index_BlueprintsManagerView as BlueprintsManagerView,
    index_BlueprintsManager as BlueprintsManager,
    index_AutomationFilterData as AutomationFilterData,
    index_MyAutomationsProps as MyAutomationsProps,
    index_MyAutomations as MyAutomations,
    index_MyBlueprintsProps as MyBlueprintsProps,
    index_MyBlueprints as MyBlueprints,
    index_TaskInitiator as TaskInitiator,
    index_PoweredByRollout as PoweredByRollout,
    index_RolloutConnectProviderProps as RolloutConnectProviderProps,
    index_RolloutConnectProvider as RolloutConnectProvider,
  };
}

declare const defaultTheme: () => string;

export { AutomationCreator, AutomationCreatorProps, AutomationEditor, AutomationFilterData, AutomationsManager, AutomationsManagerProps, BlueprintActivator, BlueprintActivatorProps, BlueprintsList, BlueprintsListProps, BlueprintsManager, BlueprintsManagerView, MyAutomations, MyAutomationsProps, MyBlueprints, MyBlueprintsProps, PoweredByRollout, PrefilledData, RolloutConnectProvider, RolloutConnectProviderProps, TaskInitiator, index as components, defaultTheme };
