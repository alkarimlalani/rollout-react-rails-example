{"version":3,"sources":["../src/trpc.tsx"],"sourcesContent":["import assert from \"assert\";\n\nimport { TRPCClient as GenericTRPCClient, TRPCClientError } from \"@trpc/client\";\nimport { createReactQueryHooks } from \"@trpc/react\";\nimport React, {\n  ReactElement,\n  useRef,\n  useState,\n  createContext,\n  useContext,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  useQuery as useReactQuery,\n  QueryClient,\n  QueryClientProvider,\n  UseQueryResult,\n} from \"react-query\";\n\nimport {\n  InferQueryInput,\n  InferQueryOutput,\n  TQuery,\n  TRPCRouter,\n} from \"@rollouthq/api\";\n\nexport type {\n  TRPCRouter,\n  TQuery,\n  TMutation,\n  InferMutationInput,\n  InferMutationOutput,\n  InferQueryInput,\n  InferQueryOutput,\n} from \"@rollouthq/api\";\n\nconst trpc = createReactQueryHooks<TRPCRouter>();\n\nexport const useQuery = trpc.useQuery;\nexport const useMutation = trpc.useMutation;\nexport const useTRPCContext = trpc.useContext;\n\n/**\n * Similar to `trpc.useQuery`, but the fetch is initiated imperatively,\n * with `fetch` function.\n * @example const q = useLazyQuery(\"hello\")\n * // somewhere in effect\n * q.fetch({ name: \"world\" })\n */\nexport function useLazyQuery<\n  TQ extends string & TQuery,\n  TI extends InferQueryInput<TQ>\n>(queryPath: TQ) {\n  const { client } = trpc.useContext();\n  const [input, setInput] = useState<TI>();\n  const [enabled, setEnabled] = useState(false);\n\n  const query = useReactQuery(\n    [queryPath, input],\n    () => {\n      assert(input != null);\n      // @ts-expect-error\n      return client.query(queryPath, input);\n    },\n    { enabled }\n  );\n\n  const fetch = (newInput: TI) => {\n    setInput(newInput);\n    setEnabled(true);\n  };\n\n  return {\n    ...query,\n    fetch,\n    input,\n  } as UseLazyQueryResult<TQ>;\n}\n\nexport type UseLazyQueryResult<TQ extends string & TQuery> = UseQueryResult<\n  InferQueryOutput<TQ>\n> & {\n  input: InferQueryInput<TQ>;\n  fetch: (input: InferQueryInput<TQ>) => void;\n};\n\nexport type TRPCClient = GenericTRPCClient<TRPCRouter>;\n\nexport type RolloutAPIClientProviderProps = {\n  token: string | (() => Promise<string> | string);\n  apiBaseUrl: string;\n  children: ReactElement;\n};\n\nexport function RolloutAPIClientProvider(props: RolloutAPIClientProviderProps) {\n  const { token: tokenOrGetToken, apiBaseUrl, children } = props;\n  const tokenRef = useRef<string | undefined>(undefined);\n\n  const getCurrentToken = useCallback(async () => {\n    if (typeof tokenOrGetToken === \"string\") {\n      return tokenOrGetToken;\n    } else {\n      if (tokenRef.current == null) {\n        tokenRef.current = await tokenOrGetToken();\n      }\n      return tokenRef.current;\n    }\n  }, [tokenOrGetToken]);\n\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            refetchOnWindowFocus: false,\n            retry(failureCount, error) {\n              if (error instanceof TRPCClientError) {\n                if (error.data.code === \"NOT_FOUND\") {\n                  return false;\n                }\n                if (error.data.code === \"UNAUTHORIZED\") {\n                  // Reset tokenRef so token is refetched on next request\n                  tokenRef.current = undefined;\n                  return true;\n                }\n              }\n              return true;\n            },\n          },\n        },\n      })\n  );\n\n  const [trpcClient] = useState(() =>\n    trpc.createClient({\n      url: `${apiBaseUrl}/trpc`,\n      async headers() {\n        const token = await getCurrentToken();\n        return {\n          authorization: `Bearer ${token}`,\n        };\n      },\n    })\n  );\n\n  const ctx = useMemo(\n    () => ({\n      getToken: getCurrentToken,\n      apiBaseUrl,\n    }),\n    [apiBaseUrl]\n  );\n\n  return (\n    <RolloutAPIClientContext.Provider value={ctx}>\n      <trpc.Provider client={trpcClient} queryClient={queryClient}>\n        <QueryClientProvider client={queryClient}>\n          {children}\n        </QueryClientProvider>\n      </trpc.Provider>\n    </RolloutAPIClientContext.Provider>\n  );\n}\n\ntype RolloutAPIClientContext = {\n  getToken: () => Promise<string>;\n  apiBaseUrl: string;\n};\n\nconst RolloutAPIClientContext = createContext<\n  RolloutAPIClientContext | undefined\n>(undefined);\n\nexport function useRolloutAPIClientContext() {\n  const context = useContext(RolloutAPIClientContext);\n\n  if (!context) {\n    const error = new Error(\"No RolloutAPIClientContext provided\");\n    error.name = \"ContextError\";\n    Error.captureStackTrace?.(error, useRolloutAPIClientContext);\n    throw error;\n  }\n\n  return context;\n}\n"],"mappings":"AAAA,OAAOA,MAAY,SAEnB,OAA0C,mBAAAC,MAAuB,eACjE,OAAS,yBAAAC,MAA6B,cACtC,OAAOC,GAEL,UAAAC,EACA,YAAAC,EACA,iBAAAC,EACA,cAAAC,EACA,WAAAC,EACA,eAAAC,MACK,QACP,OACE,YAAYC,EACZ,eAAAC,EACA,uBAAAC,MAEK,cAmBP,IAAMC,EAAOX,EAAkC,EAElCY,EAAWD,EAAK,SAChBE,EAAcF,EAAK,YACnBG,EAAiBH,EAAK,WAS5B,SAASI,EAGdC,EAAe,CACf,GAAM,CAAE,OAAAC,CAAO,EAAIN,EAAK,WAAW,EAC7B,CAACO,EAAOC,CAAQ,EAAIhB,EAAa,EACjC,CAACiB,EAASC,CAAU,EAAIlB,EAAS,EAAK,EAiB5C,MAAO,CACL,GAhBYK,EACZ,CAACQ,EAAWE,CAAK,EACjB,KACEpB,EAAOoB,GAAS,IAAI,EAEbD,EAAO,MAAMD,EAAWE,CAAK,GAEtC,CAAE,QAAAE,CAAQ,CACZ,EASE,MAPaE,GAAiB,CAC9BH,EAASG,CAAQ,EACjBD,EAAW,EAAI,CACjB,EAKE,MAAAH,CACF,CACF,CAiBO,SAASK,EAAyBC,EAAsC,CAC7E,GAAM,CAAE,MAAOC,EAAiB,WAAAC,EAAY,SAAAC,CAAS,EAAIH,EACnDI,EAAW1B,EAA2B,MAAS,EAE/C2B,EAAkBtB,EAAY,SAC9B,OAAOkB,GAAoB,SACtBA,GAEHG,EAAS,SAAW,OACtBA,EAAS,QAAU,MAAMH,EAAgB,GAEpCG,EAAS,SAEjB,CAACH,CAAe,CAAC,EAEd,CAACK,CAAW,EAAI3B,EACpB,IACE,IAAIM,EAAY,CACd,eAAgB,CACd,QAAS,CACP,qBAAsB,GACtB,MAAMsB,EAAcC,EAAO,CACzB,GAAIA,aAAiBjC,EAAiB,CACpC,GAAIiC,EAAM,KAAK,OAAS,YACtB,MAAO,GAET,GAAIA,EAAM,KAAK,OAAS,eAEtB,OAAAJ,EAAS,QAAU,OACZ,EAEX,CACA,MAAO,EACT,CACF,CACF,CACF,CAAC,CACL,EAEM,CAACK,CAAU,EAAI9B,EAAS,IAC5BQ,EAAK,aAAa,CAChB,IAAK,GAAGe,SACR,MAAM,SAAU,CAEd,MAAO,CACL,cAAe,UAFH,MAAMG,EAAgB,GAGpC,CACF,CACF,CAAC,CACH,EAEMK,EAAM5B,EACV,KAAO,CACL,SAAUuB,EACV,WAAAH,CACF,GACA,CAACA,CAAU,CACb,EAEA,OACEzB,EAAA,cAACkC,EAAwB,SAAxB,CAAiC,MAAOD,GACvCjC,EAAA,cAACU,EAAK,SAAL,CAAc,OAAQsB,EAAY,YAAaH,GAC9C7B,EAAA,cAACS,EAAA,CAAoB,OAAQoB,GAC1BH,CACH,CACF,CACF,CAEJ,CAOA,IAAMQ,EAA0B/B,EAE9B,MAAS,EAEJ,SAASgC,GAA6B,CA9K7C,IAAAC,EA+KE,IAAMC,EAAUjC,EAAW8B,CAAuB,EAElD,GAAI,CAACG,EAAS,CACZ,IAAMN,EAAQ,IAAI,MAAM,qCAAqC,EAC7D,MAAAA,EAAM,KAAO,gBACbK,EAAA,MAAM,oBAAN,MAAAA,EAAA,WAA0BL,EAAOI,GAC3BJ,CACR,CAEA,OAAOM,CACT","names":["assert","TRPCClientError","createReactQueryHooks","React","useRef","useState","createContext","useContext","useMemo","useCallback","useReactQuery","QueryClient","QueryClientProvider","trpc","useQuery","useMutation","useTRPCContext","useLazyQuery","queryPath","client","input","setInput","enabled","setEnabled","newInput","RolloutAPIClientProvider","props","tokenOrGetToken","apiBaseUrl","children","tokenRef","getCurrentToken","queryClient","failureCount","error","trpcClient","ctx","RolloutAPIClientContext","useRolloutAPIClientContext","_a","context"]}