import * as react from 'react';
import react__default, { ComponentPropsWithoutRef, ReactElement, Ref, ReactNode, PropsWithChildren, ComponentPropsWithRef, CSSProperties, DependencyList } from 'react';
import * as _stitches_react_types_util from '@stitches/react/types/util';
import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_config from '@stitches/react/types/config';
import * as S from '@stitches/react';
import { CSS as CSS$1 } from '@stitches/react';
export { Item } from '@react-stately/collections';
import { CalendarStateOptions } from '@react-stately/calendar';
import { DateValue } from '@react-types/calendar';
import { CollectionChildren } from '@react-types/shared';
import { AriaComboBoxProps } from '@react-types/combobox';
export { Item as ComboBoxItem, Section as ComboBoxSection } from 'react-stately';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import { RadioGroupProps, RadioProps } from '@react-types/radio';
import * as _tiptap_react from '@tiptap/react';
import { JSONContent as JSONContent$1 } from '@tiptap/react';
import { JSONContent, Editor } from '@tiptap/core';
import { Variable, RichEditorContent } from '@rollouthq/common';
export { RichEditorContent } from '@rollouthq/common';
import { AriaSwitchProps } from '@react-types/switch';
import { TabListProps } from '@react-types/tabs';
import { AriaTextFieldOptions } from '@react-aria/textfield';

declare const stitches: _stitches_react_types_stitches.default<"", {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>;
declare const styledPrimitives: {
    div: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    span: _stitches_react_types_styled_component.StyledComponent<"span", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    img: _stitches_react_types_styled_component.StyledComponent<"img", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    a: _stitches_react_types_styled_component.StyledComponent<"a", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    h1: _stitches_react_types_styled_component.StyledComponent<"h1", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    h2: _stitches_react_types_styled_component.StyledComponent<"h2", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    h3: _stitches_react_types_styled_component.StyledComponent<"h3", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    h4: _stitches_react_types_styled_component.StyledComponent<"h4", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    h5: _stitches_react_types_styled_component.StyledComponent<"h5", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    main: _stitches_react_types_styled_component.StyledComponent<"main", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    aside: _stitches_react_types_styled_component.StyledComponent<"aside", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    ul: _stitches_react_types_styled_component.StyledComponent<"ul", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    ol: _stitches_react_types_styled_component.StyledComponent<"ol", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    select: _stitches_react_types_styled_component.StyledComponent<"select", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    svg: _stitches_react_types_styled_component.StyledComponent<"svg", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    li: _stitches_react_types_styled_component.StyledComponent<"li", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    td: _stitches_react_types_styled_component.StyledComponent<"td", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    label: _stitches_react_types_styled_component.StyledComponent<"label", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    button: _stitches_react_types_styled_component.StyledComponent<"button", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    input: _stitches_react_types_styled_component.StyledComponent<"input", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
    textarea: _stitches_react_types_styled_component.StyledComponent<"textarea", {}, {
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>>;
};
declare type StyledWithPrimitives = typeof stitches.styled & typeof styledPrimitives;
declare const styled: StyledWithPrimitives;
declare const st: StyledWithPrimitives;
declare type CSS = S.CSS<typeof stitches.config>;
declare const createTheme: <Argument0 extends string | ({
    fontSizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        error?: string | number | boolean | undefined;
        text?: string | number | boolean | undefined;
        textSecondary?: string | number | boolean | undefined;
        "neutral-2"?: string | number | boolean | undefined;
        gray?: string | number | boolean | undefined;
        grayMedium?: string | number | boolean | undefined;
        interactPrimary?: string | number | boolean | undefined;
        primary?: string | number | boolean | undefined;
        "primary-1"?: string | number | boolean | undefined;
        primaryDark?: string | number | boolean | undefined;
        surfaceSecondary?: string | number | boolean | undefined;
        strokeMedium?: string | number | boolean | undefined;
        strokeDark?: string | number | boolean | undefined;
        action?: string | number | boolean | undefined;
        "neutral-4"?: string | number | boolean | undefined;
        "splash-green"?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        none?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        "0-5"?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        "1-5"?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        "2-5"?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        "3-5"?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    fontSizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        error?: string | number | boolean | undefined;
        text?: string | number | boolean | undefined;
        textSecondary?: string | number | boolean | undefined;
        "neutral-2"?: string | number | boolean | undefined;
        gray?: string | number | boolean | undefined;
        grayMedium?: string | number | boolean | undefined;
        interactPrimary?: string | number | boolean | undefined;
        primary?: string | number | boolean | undefined;
        "primary-1"?: string | number | boolean | undefined;
        primaryDark?: string | number | boolean | undefined;
        surfaceSecondary?: string | number | boolean | undefined;
        strokeMedium?: string | number | boolean | undefined;
        strokeDark?: string | number | boolean | undefined;
        action?: string | number | boolean | undefined;
        "neutral-4"?: string | number | boolean | undefined;
        "splash-green"?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        none?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        "0-5"?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        "1-5"?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        "2-5"?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        "3-5"?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, ""> : _stitches_react_types_stitches.ThemeTokens<Argument0, "">);
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{
        sm: "(min-width: 30em)";
        md: "(min-width: 48em)";
        lg: "(min-width: 62em)";
        xl: "(min-width: 80em)";
        "2xl": "(min-width: 96em)";
    }, {
        fontSizes: {
            "1": string;
            "2": string;
            "3": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
        };
        colors: {
            error: string;
            text: string;
            textSecondary: string;
            "neutral-2": string;
            gray: string;
            grayMedium: string;
            interactPrimary: string;
            primary: string;
            "primary-1": string;
            primaryDark: string;
            surfaceSecondary: string;
            strokeMedium: string;
            strokeDark: string;
            action: string;
            "neutral-4": string;
            "splash-green": string;
        };
        radii: {
            none: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
        };
        space: {
            "0-5": string;
            "1": string;
            "1-5": string;
            "2": string;
            "2-5": string;
            "3": string;
            "3-5": string;
            "4": string;
        };
        shadows: {
            xs: string;
            sm: string;
            base: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
        };
    }, _stitches_react_types_config.DefaultThemeMap, {
        bg: (value: S.PropertyValue<"boxShadow">) => {
            background: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        marginX: (val: S.PropertyValue<"marginInline">) => {
            marginInline: {
                readonly [S.$$PropertyValue]: "marginInline";
            };
        };
        marginY: (value: S.PropertyValue<"marginBlock">) => {
            marginBlock: {
                readonly [S.$$PropertyValue]: "marginBlock";
            };
        };
        paddingX: (value: S.PropertyValue<"paddingInline">) => {
            paddingInline: {
                readonly [S.$$PropertyValue]: "paddingInline";
            };
        };
        paddingY: (value: S.PropertyValue<"paddingBlock">) => {
            paddingBlock: {
                readonly [S.$$PropertyValue]: "paddingBlock";
            };
        };
        shadow: (value: S.PropertyValue<"boxShadow">) => {
            boxShadow: {
                readonly [S.$$PropertyValue]: "boxShadow";
            };
        };
        size: (value: S.PropertyValue<"width">) => {
            height: {
                readonly [S.$$PropertyValue]: "width";
            };
            width: {
                readonly [S.$$PropertyValue]: "width";
            };
        };
    }>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>; })[]) => () => string;
declare const getCssText: () => string;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    fontSizes: {
        1: _stitches_react_types_theme.Token<"1", string, "fontSizes", "">;
        2: _stitches_react_types_theme.Token<"2", string, "fontSizes", "">;
        3: _stitches_react_types_theme.Token<"3", string, "fontSizes", "">;
    };
    fontWeights: {
        hairline: _stitches_react_types_theme.Token<"hairline", string, "fontWeights", "">;
        thin: _stitches_react_types_theme.Token<"thin", string, "fontWeights", "">;
        light: _stitches_react_types_theme.Token<"light", string, "fontWeights", "">;
        normal: _stitches_react_types_theme.Token<"normal", string, "fontWeights", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "">;
        semibold: _stitches_react_types_theme.Token<"semibold", string, "fontWeights", "">;
        bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "">;
    };
    colors: {
        error: _stitches_react_types_theme.Token<"error", string, "colors", "">;
        text: _stitches_react_types_theme.Token<"text", string, "colors", "">;
        textSecondary: _stitches_react_types_theme.Token<"textSecondary", string, "colors", "">;
        "neutral-2": _stitches_react_types_theme.Token<"neutral-2", string, "colors", "">;
        gray: _stitches_react_types_theme.Token<"gray", string, "colors", "">;
        grayMedium: _stitches_react_types_theme.Token<"grayMedium", string, "colors", "">;
        interactPrimary: _stitches_react_types_theme.Token<"interactPrimary", string, "colors", "">;
        primary: _stitches_react_types_theme.Token<"primary", string, "colors", "">;
        "primary-1": _stitches_react_types_theme.Token<"primary-1", string, "colors", "">;
        primaryDark: _stitches_react_types_theme.Token<"primaryDark", string, "colors", "">;
        surfaceSecondary: _stitches_react_types_theme.Token<"surfaceSecondary", string, "colors", "">;
        strokeMedium: _stitches_react_types_theme.Token<"strokeMedium", string, "colors", "">;
        strokeDark: _stitches_react_types_theme.Token<"strokeDark", string, "colors", "">;
        action: _stitches_react_types_theme.Token<"action", string, "colors", "">;
        "neutral-4": _stitches_react_types_theme.Token<"neutral-4", string, "colors", "">;
        "splash-green": _stitches_react_types_theme.Token<"splash-green", string, "colors", "">;
    };
    radii: {
        none: _stitches_react_types_theme.Token<"none", string, "radii", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "radii", "">;
        base: _stitches_react_types_theme.Token<"base", string, "radii", "">;
        md: _stitches_react_types_theme.Token<"md", string, "radii", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "radii", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "radii", "">;
        "2xl": _stitches_react_types_theme.Token<"2xl", string, "radii", "">;
        "3xl": _stitches_react_types_theme.Token<"3xl", string, "radii", "">;
        full: _stitches_react_types_theme.Token<"full", string, "radii", "">;
    };
    space: {
        "0-5": _stitches_react_types_theme.Token<"0-5", string, "space", "">;
        1: _stitches_react_types_theme.Token<"1", string, "space", "">;
        "1-5": _stitches_react_types_theme.Token<"1-5", string, "space", "">;
        2: _stitches_react_types_theme.Token<"2", string, "space", "">;
        "2-5": _stitches_react_types_theme.Token<"2-5", string, "space", "">;
        3: _stitches_react_types_theme.Token<"3", string, "space", "">;
        "3-5": _stitches_react_types_theme.Token<"3-5", string, "space", "">;
        4: _stitches_react_types_theme.Token<"4", string, "space", "">;
    };
    shadows: {
        xs: _stitches_react_types_theme.Token<"xs", string, "shadows", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "shadows", "">;
        base: _stitches_react_types_theme.Token<"base", string, "shadows", "">;
        md: _stitches_react_types_theme.Token<"md", string, "shadows", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "shadows", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "shadows", "">;
        "2xl": _stitches_react_types_theme.Token<"2xl", string, "shadows", "">;
    };
};
declare const css: <Composers extends (string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS_1 = _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : _stitches_react_types_util.WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : _stitches_react_types_util.WideObject) | undefined;
} & CSS_1 & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; } : never); }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, CSS_1>;
declare const Flex: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>;
declare const Wrap: _stitches_react_types_styled_component.StyledComponent<_stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>;
declare const Center: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>;
declare const Icon: _stitches_react_types_styled_component.StyledComponent<"svg", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>;
declare const InputGroup: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: S.PropertyValue<"boxShadow">) => {
        background: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: S.PropertyValue<"marginInline">) => {
        marginInline: {
            readonly [S.$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: S.PropertyValue<"marginBlock">) => {
        marginBlock: {
            readonly [S.$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: S.PropertyValue<"paddingInline">) => {
        paddingInline: {
            readonly [S.$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: S.PropertyValue<"paddingBlock">) => {
        paddingBlock: {
            readonly [S.$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: S.PropertyValue<"boxShadow">) => {
        boxShadow: {
            readonly [S.$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: S.PropertyValue<"width">) => {
        height: {
            readonly [S.$$PropertyValue]: "width";
        };
        width: {
            readonly [S.$$PropertyValue]: "width";
        };
    };
}>>;
declare type IconProps = ComponentPropsWithoutRef<typeof Icon>;

declare function Apps(props: IconProps): JSX.Element;

declare function ArrowBack(props: IconProps): JSX.Element;

declare function Check(props: IconProps): JSX.Element;

declare function ChevronDown(props: IconProps): JSX.Element;

declare function ChevronDownClosed(props: IconProps): JSX.Element;

declare function Code(props: IconProps): JSX.Element;

declare function Cog(props: IconProps): JSX.Element;

declare function Copy(props: IconProps): JSX.Element;

declare function Cursor(props: IconProps): JSX.Element;

declare function Delete(props: IconProps): JSX.Element;

declare function Doodle(props: IconProps): JSX.Element;

declare function Email(props: IconProps): JSX.Element;

declare function Gear(props: IconProps): JSX.Element;

declare function Google(props: IconProps): JSX.Element;

declare function GoogleSignInHover(props: IconProps): JSX.Element;

declare function GoogleSignInNormal(props: IconProps): JSX.Element;

declare function GreenPlus(props: IconProps): JSX.Element;

declare function InterfaceSetting(props: IconProps): JSX.Element;

declare function LabelTag(props: IconProps): JSX.Element;

declare function Lightning(props: IconProps): JSX.Element;

declare function Lock(props: IconProps): JSX.Element;

declare function Pencil(props: IconProps): JSX.Element;

declare function Person(props: IconProps): JSX.Element;

declare function Plus(props: IconProps): JSX.Element;

declare function PrivateEye(props: IconProps): JSX.Element;

declare function PrivateEyeCover(props: IconProps): JSX.Element;

declare function RedQuestion(props: IconProps): JSX.Element;

declare function Refresh(props: IconProps): JSX.Element;

declare function Refresh2(props: IconProps): JSX.Element;

declare function Rocket(props: IconProps): JSX.Element;

declare function Rollout(props: IconProps): JSX.Element;

declare function RolloutIcon(props: IconProps): JSX.Element;

declare function Search(props: IconProps): JSX.Element;

declare function SkipNext(props: IconProps): JSX.Element;

declare function TextType(props: IconProps): JSX.Element;

declare function ThreeDots(props: IconProps): JSX.Element;

declare function ToDo(props: IconProps): JSX.Element;

declare function Trash(props: IconProps): JSX.Element;

declare function TrashRed(props: IconProps): JSX.Element;

declare function UserForm(props: IconProps): JSX.Element;

declare function Warning(props: IconProps): JSX.Element;

declare type AvatarProps = {
    src?: string;
    alt?: string;
    name?: string;
};
declare const baseStyle: {
    display: string;
    alignItems: string;
    justifyContent: string;
    textAlign: string;
    textTransform: string;
    fontWeight: string;
    position: string;
    flexShrink: number;
};
/**
 * Avatar component that renders an user avatar with
 * support for fallback avatar and name-only avatars
 */
declare const Avatar: (props: any) => JSX.Element;

declare const Button: _stitches_react_types_styled_component.StyledComponent<react__default.ForwardRefExoticComponent<Pick<react__default.DetailedHTMLProps<react__default.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof react__default.ButtonHTMLAttributes<HTMLButtonElement>> & {
    isDisabled?: boolean | undefined;
} & react__default.RefAttributes<HTMLButtonElement>>, {
    variant?: "primary" | "outline" | "ghost" | undefined;
}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;

declare function Calendar<T extends DateValue>(props: CalendarStateOptions): JSX.Element;

declare type ComboBoxProps<T> = {
    optionKey?: keyof T;
    defaultItems: readonly T[];
    isDisabled?: boolean;
    label?: AriaComboBoxProps<T>["label"];
    menuTrigger?: AriaComboBoxProps<T>["menuTrigger"];
    isRequired?: boolean;
    selectedOption: T | undefined;
    onSelectionChange?: (newSelectedOption: T | undefined) => void;
    inputPlaceholder?: string;
    isLoading?: boolean;
    icon?: ReactElement | undefined | null;
    customRef?: Ref<HTMLInputElement>;
    children: CollectionChildren<T & {
        _comboboxKey: string;
    }>;
};
declare function ComboBox<T extends object>(props: ComboBoxProps<T>): JSX.Element;

declare type DividerProps = {};
declare const Divider: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;

declare type FormControlProps = {
    label?: string;
    description?: string;
    error?: string;
    isRequired?: boolean;
    children: ReactElement;
};
declare function FormControl(props: FormControlProps): JSX.Element;

declare function GoogleSignIn(): JSX.Element;

declare type GridProps = {
    area?: CSS["gridArea"];
    templateAreas?: CSS["gridTemplateAreas"];
    gap?: CSS["gridGap"];
    rowGap?: CSS["gridRowGap"];
    columnGap?: CSS["gridColumnGap"];
    column?: CSS["gridColumn"];
    row?: CSS["gridRow"];
    autoFlow?: CSS["gridAutoFlow"];
    autoRows?: CSS["gridAutoRows"];
    templateRows?: CSS["gridTemplateRows"];
    autoColumns?: CSS["gridAutoColumns"];
    templateColumns?: CSS["gridTemplateColumns"];
    css?: CSS;
    className?: string;
    children: ReactNode;
};
declare const Grid: (props: GridProps) => JSX.Element;

declare type SimpleGridOptions = {
    /**
     * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.
     */
    minChildWidth?: CSS["minWidth"];
    /**
     * The number of columns
     */
    columns?: CSS["columns"];
    /**
     * The gap between the grid items
     */
    spacing?: CSS["gridGap"];
    /**
     * The column gap between the grid items
     */
    spacingX?: CSS["gridGap"];
    /**
     * The row gap between the grid items
     */
    spacingY?: CSS["gridGap"];
};
declare type SimpleGridProps = GridProps & SimpleGridOptions;
declare const SimpleGrid: (props: SimpleGridProps) => JSX.Element;

declare const Popover: react.FC<PopoverPrimitive.PopoverProps>;
declare const PopoverTrigger: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<PopoverPrimitive.PopoverTriggerProps & react.RefAttributes<HTMLButtonElement>>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;
declare const PopoverContent: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<PopoverPrimitive.PopoverContentProps & react.RefAttributes<HTMLDivElement>>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;
declare const PopoverArrow: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<PopoverPrimitive.PopoverArrowProps & react.RefAttributes<SVGSVGElement>>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;
declare const PopoverClose: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<PopoverPrimitive.PopoverCloseProps & react.RefAttributes<HTMLButtonElement>>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;

declare function RadioGroup(props: PropsWithChildren<RadioGroupProps>): JSX.Element;
declare type RadioProp = PropsWithChildren<RadioProps> & {
    activeColor: string;
    onClick: () => void;
};
declare function Radio(props: RadioProp): JSX.Element;

declare type RichEditorRef = {
    container: HTMLDivElement | null;
    focus(): void;
};
declare type RichEditorProps = {
    value: JSONContent | null;
    mentionVariables?: readonly Variable[] | false;
    curlyBracketVariables?: readonly Variable[] | false;
    inputVariant?: "outline" | "ghost";
    variant?: "full" | "reduced" | "inline";
    isDisabled?: boolean;
    setValue?: (newValue: RichEditorContent | null) => void;
    placeholder?: string;
    placeholderColor?: string;
    styles?: Record<string, Record<string, any>>;
    onEnter?: (currentValue: RichEditorContent | null) => undefined;
    onShiftEnter?: (currentValue: RichEditorContent | null) => undefined;
    onLeave?: (currentValue: RichEditorContent | null) => void;
    onEscape?: () => void;
    linksEnabled?: boolean;
    formattingEnabled?: boolean;
    ["data-cy"]?: string;
    autoFocus?: boolean;
};
declare const RichEditor: react__default.ForwardRefExoticComponent<RichEditorProps & react__default.RefAttributes<RichEditorRef>>;
declare const StyledEditorContent: _stitches_react_types_styled_component.StyledComponent<react__default.MemoExoticComponent<typeof _tiptap_react.PureEditorContent>, {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;
declare type RichEditorContext = {
    editor: Editor;
    mentionsEnabled: boolean;
    curlyBracketsEnabled: boolean;
    linksEnabled: boolean;
};
declare const useRichEditorContext: () => RichEditorContext;

declare type RichEditorPreviewProps = ComponentPropsWithRef<typeof st.div> & {
    value: JSONContent$1;
};
declare function RichEditorPreview(props: RichEditorPreviewProps): JSX.Element | null;

declare type SelectProps<T> = AriaComboBoxProps<T> & {
    inputPlaceholder?: string;
    isLoading?: boolean;
    icon?: ReactElement | undefined | null;
    onChange?: AriaComboBoxProps<T>["onSelectionChange"];
    styles?: CSSProperties;
};
declare function Select<T extends Record<string, any>>(uncProps: SelectProps<T>): JSX.Element;

declare type MultiSelectOption = {
    id: string;
    name: string;
};
declare type MultiSelectProps = {
    items: MultiSelectOption[];
    value: string | undefined;
    label?: string;
    isRequired?: boolean;
    isDisabled?: boolean;
    inputPlaceholder?: string;
    isLoading?: boolean;
    onSelectionChange: (items: MultiSelectOption[]) => void;
};
declare function MultiSelect(props: MultiSelectProps): JSX.Element;

declare type SpinnerProps = {};
declare const Spinner: _stitches_react_types_styled_component.StyledComponent<"div", {}, {
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, _stitches_react_types_css_util.CSS<{
    sm: "(min-width: 30em)";
    md: "(min-width: 48em)";
    lg: "(min-width: 62em)";
    xl: "(min-width: 80em)";
    "2xl": "(min-width: 96em)";
}, {
    fontSizes: {
        "1": string;
        "2": string;
        "3": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
    };
    colors: {
        error: string;
        text: string;
        textSecondary: string;
        "neutral-2": string;
        gray: string;
        grayMedium: string;
        interactPrimary: string;
        primary: string;
        "primary-1": string;
        primaryDark: string;
        surfaceSecondary: string;
        strokeMedium: string;
        strokeDark: string;
        action: string;
        "neutral-4": string;
        "splash-green": string;
    };
    radii: {
        none: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
    };
    space: {
        "0-5": string;
        "1": string;
        "1-5": string;
        "2": string;
        "2-5": string;
        "3": string;
        "3-5": string;
        "4": string;
    };
    shadows: {
        xs: string;
        sm: string;
        base: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
    };
}, _stitches_react_types_config.DefaultThemeMap, {
    bg: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        background: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    marginX: (val: {
        readonly [$$PropertyValue]: "marginInline";
    }) => {
        marginInline: {
            readonly [$$PropertyValue]: "marginInline";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "marginBlock";
    }) => {
        marginBlock: {
            readonly [$$PropertyValue]: "marginBlock";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "paddingInline";
    }) => {
        paddingInline: {
            readonly [$$PropertyValue]: "paddingInline";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "paddingBlock";
    }) => {
        paddingBlock: {
            readonly [$$PropertyValue]: "paddingBlock";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        height: {
            readonly [$$PropertyValue]: "width";
        };
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
}>>;

declare function Switch(props: AriaSwitchProps & {
    css?: CSS;
}): JSX.Element;

declare type ExtraProps = {
    radio?: boolean;
    completedKeys?: string[];
};
declare type Tabs<T> = TabListProps<T> & ExtraProps;
declare function Tabs<T extends object>(props: Tabs<T>): JSX.Element;

declare type TextFieldProps = AriaTextFieldOptions<"input"> & {
    onClick?: () => void;
    required?: boolean;
    className?: string;
    css?: CSS$1;
};
declare const TextField: react__default.ForwardRefExoticComponent<AriaTextFieldOptions<"input"> & {
    onClick?: (() => void) | undefined;
    required?: boolean | undefined;
    className?: string | undefined;
    css?: CSS$1<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }> | undefined;
} & react__default.RefAttributes<HTMLInputElement>>;

declare type TextAreaProps = AriaTextFieldOptions<"textarea"> & {
    rows?: number;
    required?: boolean;
    description?: string;
    className?: string;
};
declare function TextArea(props: TextAreaProps): JSX.Element;

declare function canUseDOM(): boolean;
declare const isBrowser: boolean;
declare const dataAttr: (condition: boolean | undefined) => "" | undefined;
declare function isChildofInteractiveElement(el: Element): boolean;

declare type CreateContextOptions = {
    /**
     * If `true`, React will throw if context is `null` or `undefined`
     * In some cases, you might want to support nested context, so you can set it to `false`
     */
    strict?: boolean;
    /**
     * Error message to throw if the context is `undefined`
     */
    errorMessage?: string;
    /**
     * The display name of the context
     */
    name?: string;
};
declare type CreateContextReturn<T> = [react__default.Provider<T>, () => T, react__default.Context<T>];
/**
 * Creates a named context, provider, and hook.
 *
 * @param options create context options
 */
declare function createContext<ContextType>(options?: CreateContextOptions): CreateContextReturn<ContextType>;

declare function useAsyncMemo<T>(factory: () => Promise<T> | undefined | null, deps: DependencyList): {
    value: T | undefined;
    isLoading: boolean;
};
declare function useAsyncMemo<T>(factory: () => Promise<T> | undefined | null, deps: DependencyList, initial: T): {
    value: T;
    isLoading: boolean;
};

declare const useToggle: (opts?: {
    defaultIsOpen?: boolean;
}) => [boolean, react.DispatchWithoutAction];

declare function useTimeouts(): (callback: Function, time: number) => () => void;

export { Apps, ArrowBack, Avatar, AvatarProps, Button, CSS, Calendar, Center, Check, ChevronDown, ChevronDownClosed, Code, Cog, ComboBox, ComboBoxProps, Copy, CreateContextOptions, Cursor, Delete, Divider, DividerProps, Doodle, Email, Flex, FormControl, FormControlProps, Gear, Google, GoogleSignIn, GoogleSignInHover, GoogleSignInNormal, GreenPlus, Grid, GridProps, Icon, IconProps, InputGroup, InterfaceSetting, LabelTag, Lightning, Lock, MultiSelect, MultiSelectOption, Pencil, Person, Plus, Popover, PopoverArrow, PopoverClose, PopoverContent, PopoverTrigger, PrivateEye, PrivateEyeCover, Radio, RadioGroup, RedQuestion, Refresh, Refresh2, RichEditor, RichEditorContext, RichEditorPreview, RichEditorPreviewProps, RichEditorProps, RichEditorRef, Rocket, Rollout, RolloutIcon, Search, Select, SelectProps, SimpleGrid, SimpleGridProps, SkipNext, Spinner, SpinnerProps, StyledEditorContent, Switch, Tabs, TextArea, TextField, TextFieldProps, TextType, ThreeDots, ToDo, Trash, TrashRed, UserForm, Warning, Wrap, baseStyle, canUseDOM, createContext, createTheme, css, dataAttr, getCssText, globalCss, isBrowser, isChildofInteractiveElement, st, styled, theme, useAsyncMemo, useRichEditorContext, useTimeouts, useToggle };
